/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.09.2024 17:53:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 29441, -43777, -47808, -44098, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00018131081014871597, 0.00014075206127017736, 0.00012709666043519974, 0.00013299839338287711, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 10,-10,-72,-81,122,-4,5,-25,125,-9,88,8,-78,-47,100,19,34,-28,-127,33,-49,17,-24,96,0,25,-8,43,93,-41,50,-10, 
  /* [1][0][][] */ 82,87,-89,-31,-20,42,120,42,-23,-44,-89,50,111,-63,85,-94,127,-78,21,-36,32,-56,-63,11,-13,-64,81,-46,-59,-127,-26,-16, 
  /* [2][0][][] */ -41,106,26,115,-17,-16,95,40,-70,-96,107,-88,-127,114,-95,101,43,110,93,-56,7,59,-9,-8,17,-26,63,-88,4,16,67,101, 
  /* [3][0][][] */ 63,-92,87,-3,7,116,25,-6,25,-91,29,109,53,-31,-114,-2,115,-71,100,19,-116,1,11,-2,105,8,-102,117,-110,127,26,38, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0039992667734622955, 0.003104641567915678, 0.0028034371789544821, 0.0029336146544665098, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -417, -445, -308, -527, -1476, -393, -706, -806, -1337, -1284, 47, -106, -516, -505, -1439, -1457, -346, -1537, -338, -1352, -936, -852, -1171, -1329, -261, -1525, -1865, -1317, -1149, -96, -1151, -446, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.8478966820985079e-05, 5.0072125304723158e-05, 6.2831917603034526e-05, 6.0059363022446632e-05, 5.1501647249097005e-05, 4.9963386118179187e-05, 4.4829066609963775e-05, 4.9884907639352605e-05, 5.4256044677458704e-05, 5.5513301049359143e-05, 4.6987341193016618e-05, 5.04629424540326e-05, 6.535038846777752e-05, 6.5144544350914657e-05, 5.5356747907353565e-05, 5.0743441533995792e-05, 4.72584470116999e-05, 5.6952409067889675e-05, 4.5041309931548312e-05, 5.1907285524066538e-05, 5.5351996707031503e-05, 5.4167914640856907e-05, 5.0484028179198503e-05, 5.4298223403748125e-05, 5.7865505368681625e-05, 5.2764102292712778e-05, 5.2820490964222699e-05, 5.406514901551418e-05, 4.8683876229915768e-05, 5.0063208618666977e-05, 5.0180016842205077e-05, 4.9628160923020914e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -68,-81,32,11,67,10,-56,-82,27,-71,-104,13,26,-29,-49,3,-31,-53,-71,-39,-63,-68,-21,77,-90,6,11,-36,96,-46,-30,-49,62,-66,-72,61,-68,-70,-100,42,60,-67,-78,59,22,-122,31,-10,-32,-62,-29,82,-69,-79,-98,68,39,57,64,-127,-67,47,-31,38,-17,-31,52,57,42,88,44,-100,51,-102,-6,60,-81,1,-95,28,30,22,39,-41,-88,-58,-93,30,-7,72,-12,-95,4,76,0,8, 
  /* [1][0][][] */ -17,35,-39,14,-38,101,31,11,54,-101,-96,110,69,-17,41,55,118,-87,-37,76,-45,-10,33,15,-33,14,-100,120,21,-6,109,-30,33,115,-2,32,-15,-33,-5,-78,-21,-6,-23,-69,-23,-10,-3,-70,-95,-98,87,63,1,68,-107,-42,31,95,-30,108,-68,104,-34,-58,-53,58,55,43,127,53,-67,34,-94,-6,-51,29,72,-58,33,61,-66,80,-107,-97,20,22,-72,-64,45,4,97,45,76,105,50,-106, 
  /* [2][0][][] */ 5,37,-47,34,-61,-73,18,92,-42,21,-16,59,48,-24,62,-61,-51,-14,58,43,-48,-22,65,-26,-5,14,88,-14,-83,77,-23,24,-80,-45,-97,-104,-53,86,92,-30,-127,-120,-5,10,-58,89,-22,-46,96,24,50,-80,-46,72,29,-23,-58,35,-59,-12,16,26,-4,-10,31,7,56,58,-90,38,11,-62,20,-9,33,21,-45,28,16,11,3,-120,-16,-15,4,-50,-43,10,63,90,-20,-42,-77,-51,-55,-27, 
  /* [3][0][][] */ 72,16,40,-32,-75,31,-106,49,68,-26,63,-1,75,70,69,11,48,51,-53,-21,103,-73,-43,-103,-54,-96,-75,93,0,-65,64,9,-60,-11,-15,-33,-106,-32,47,7,-11,-118,-93,20,43,17,-23,-89,5,-64,5,-42,58,42,25,-87,-92,-91,-127,-9,-81,31,-14,32,12,1,-56,-25,-13,-78,-8,90,18,-99,42,-53,12,47,120,-43,-79,-121,0,70,24,17,-37,-62,-49,29,-5,-73,50,-56,-49,1, 
  /* [4][0][][] */ 10,51,-25,16,-51,-49,-6,-23,17,47,-42,11,-10,-63,-45,-93,-58,-42,-86,-24,56,-112,40,-12,-45,-34,16,-81,-72,-2,-80,-78,28,62,-20,-117,-66,-40,-125,15,-67,-86,-85,-105,-6,52,1,11,1,-70,-39,-84,-103,3,-101,-15,-2,-110,-9,-22,-30,-86,-69,-82,-65,16,-35,-68,-9,-47,-116,-98,-78,-21,47,11,15,-52,-37,-84,-22,-67,-104,-42,-35,23,44,-33,-127,-91,1,10,0,45,-107,-51, 
  /* [5][0][][] */ 52,-82,30,52,21,-108,21,65,112,-112,-4,-44,8,65,30,34,65,69,-39,95,32,53,4,-35,-80,-70,-1,-127,43,31,-28,-105,-33,-33,-68,3,-90,-11,44,54,-102,-72,19,85,-34,21,16,-36,-59,80,16,32,22,34,33,-28,96,46,-57,-88,51,-71,40,-70,-48,30,0,15,40,9,96,-76,-47,102,-20,-69,-5,-27,-2,77,69,12,12,82,-81,85,-24,61,53,-80,89,42,-49,35,49,-56, 
  /* [6][0][][] */ 15,-66,95,72,-87,-52,-2,72,-31,-99,2,-69,72,37,101,-122,50,-28,-15,90,-84,-125,80,40,-85,-88,-31,-69,-22,-127,50,-68,-109,-125,-53,-103,-31,37,-107,86,95,39,29,-22,-116,77,-83,-47,-117,5,-27,-47,50,-62,81,-30,14,-5,-114,88,-89,-18,61,-61,-57,50,98,-57,78,15,-125,-6,46,-71,-95,-51,-97,-111,-42,-32,24,-27,13,-20,-85,-104,-62,-91,64,58,81,10,-69,-63,80,-36, 
  /* [7][0][][] */ 109,51,-36,-36,-75,119,-23,4,114,-15,-103,35,43,-91,44,52,64,-16,-39,90,48,27,-22,63,-102,76,-3,51,-60,78,-16,42,5,21,52,85,-106,56,-16,-22,96,-94,65,62,42,-28,90,-103,-1,-74,-109,-51,-42,81,-17,19,102,-72,-78,-58,7,-12,82,-97,-80,-47,60,15,-77,42,15,75,64,-37,34,35,-64,54,-46,40,64,-36,-66,-73,58,8,-127,98,50,-24,73,59,-58,-7,4,-83, 
  /* [8][0][][] */ -24,-7,-56,-100,18,-9,-88,-37,-25,-3,8,52,-26,-67,-98,-89,-89,46,-80,-18,-11,-55,39,69,-127,41,8,30,-88,-13,-104,61,49,-56,6,-35,77,-28,-41,35,35,49,-110,-111,-39,-60,-54,49,14,-104,-82,-34,-79,-29,-53,-115,8,58,-95,60,56,14,-3,54,-58,-65,-49,46,-100,14,-9,-30,33,30,-18,-14,-71,58,37,22,0,34,-114,-101,-5,-1,31,-62,1,-58,-104,56,-89,-115,-66,17, 
  /* [9][0][][] */ -29,-19,61,6,35,-102,-68,-127,6,6,-38,13,-53,-92,-110,-47,-6,-33,-110,-84,-23,44,-116,-107,63,-37,-36,-7,-40,-76,-94,54,17,-29,-12,-45,-87,-19,-58,-66,22,-76,11,-105,46,-12,-112,17,59,-42,-91,11,27,-85,-78,47,40,-81,-41,-29,-100,57,41,-90,-94,-18,50,8,-63,49,55,-103,-26,31,-113,-101,-84,-122,-57,55,-4,-1,52,11,-65,-101,-2,-39,48,0,-48,54,58,-24,19,-57, 
  /* [10][0][][] */ -35,100,112,-80,-67,89,51,60,66,-19,51,-76,103,82,-10,42,-74,34,-99,-103,11,13,53,-101,3,23,-107,-78,-87,97,-95,-82,50,111,98,42,-77,2,-1,-17,-58,28,-112,-4,-90,-47,12,-89,-47,8,-22,-33,50,49,-127,-54,-110,-47,-3,-3,-24,76,118,-14,69,-36,-85,-6,38,-38,-84,-46,90,54,-56,91,-14,7,114,41,66,-53,28,89,-74,30,83,-12,52,16,9,-71,-75,-16,-51,-69, 
  /* [11][0][][] */ 41,-55,-53,89,107,39,58,17,46,68,-59,87,-37,-118,-8,-90,-31,-125,79,35,9,72,-17,-105,-69,-87,-46,47,92,-27,18,-18,-68,-97,18,58,-52,84,-24,-37,-2,91,-28,-32,-65,-127,-126,-54,28,93,110,54,-69,-123,24,-7,-23,-57,-41,-56,-44,41,84,28,25,33,-34,3,71,64,-108,-74,-4,121,-125,55,-67,42,-113,71,-89,-26,-51,-15,-11,-92,-9,-58,-95,-9,-10,-106,-88,-11,-48,-3, 
  /* [12][0][][] */ -28,25,-69,7,59,29,-13,6,-27,38,-42,35,-50,-34,24,-67,-23,-2,-16,-34,22,6,0,75,-42,-35,62,-73,84,-14,-35,93,-46,-79,-32,25,24,-37,-46,86,85,30,-76,-47,-18,-64,-57,98,18,-105,-37,96,12,12,-50,51,8,-17,7,-7,63,63,20,42,70,-28,-14,75,40,95,13,40,27,93,-45,1,-12,47,-127,-55,-52,79,-6,11,-54,39,-1,103,-111,-81,53,19,66,15,26,57, 
  /* [13][0][][] */ 94,-3,91,48,24,82,6,63,65,-121,22,-33,65,47,59,-14,-122,-96,-91,-35,66,-51,68,-70,-96,-7,-15,48,-106,-40,54,31,-15,88,-35,-7,-127,-59,41,-16,-55,-18,-56,36,-18,21,14,-68,-37,52,-58,-103,-77,51,20,-85,-71,-7,-71,-7,-19,87,-34,-24,-65,-1,-78,64,-7,-29,26,10,-60,-39,-45,-42,-60,34,107,-27,26,-90,29,20,-48,-102,35,93,-4,-48,-37,40,54,-8,56,-60, 
  /* [14][0][][] */ -64,-54,46,20,69,14,-11,-116,-75,-42,39,57,-51,-104,-100,-94,-49,-63,-25,-16,-62,-12,-29,68,-112,-81,-55,49,-102,-117,-38,75,52,-18,-65,-19,47,55,-3,-45,27,-97,-7,63,27,-113,10,-100,69,-7,34,60,52,-39,-33,-25,-42,21,13,127,-26,-40,-50,41,-100,24,27,-114,-100,-110,-88,43,-33,31,8,-86,65,-112,20,-7,6,-25,-115,-39,-127,-91,-113,55,52,-26,36,-32,40,45,-36,13, 
  /* [15][0][][] */ 6,-56,19,33,46,-105,18,-80,17,-31,-97,-28,68,-8,-88,-122,42,-21,-107,-12,4,-2,33,64,30,30,2,58,-14,36,22,-123,-24,-11,-81,-23,-91,60,59,-94,-20,59,-38,-23,-3,-104,-25,-104,-30,-95,-41,-7,-118,-96,-80,-32,35,9,-69,52,-75,-79,-35,53,-62,101,-78,-11,-77,-25,16,-93,11,-47,48,-127,-37,16,71,31,-99,18,-112,-96,-86,-67,-109,-5,46,28,-109,-59,33,75,-125,62, 
  /* [16][0][][] */ -70,-2,72,-58,32,116,-46,51,68,34,-101,89,-15,-56,-41,-52,120,78,71,71,110,83,-46,41,-29,43,-58,37,-79,16,22,17,-97,54,50,54,-25,63,-42,-27,20,-61,59,89,60,89,88,-2,-36,-108,4,112,-47,126,55,40,32,94,35,-22,127,93,49,60,37,-15,-12,83,43,112,-29,-13,24,102,58,75,-14,103,-94,-1,0,-81,30,6,1,102,74,41,64,12,-13,88,46,3,-74,32, 
  /* [17][0][][] */ -10,-114,5,30,-67,-114,-85,-85,-4,-102,27,5,40,11,-120,2,-5,8,53,53,-106,-45,-22,-69,-12,16,-94,-12,45,-78,-57,23,-57,-52,-10,-29,-69,38,-103,-59,-105,-64,-36,-42,-26,-28,32,-120,41,44,-46,-14,-47,24,33,-87,-126,32,-93,-122,-12,-104,21,40,-99,-87,12,-107,-117,-32,47,-12,-21,-127,-89,15,54,-67,2,-80,-24,-45,-86,-101,-118,20,28,-59,-15,28,-109,-120,-37,43,-25,-26, 
  /* [18][0][][] */ -71,106,106,-78,-26,-112,-101,41,27,57,-94,-45,-25,30,71,-29,7,-11,78,-21,111,-55,22,-94,-1,-99,1,100,3,50,-6,35,24,-17,-107,-127,-43,46,-4,77,-48,-39,-52,22,-101,29,40,-11,38,-22,44,-5,-109,20,11,73,-52,39,-57,-108,94,107,22,29,-89,-107,-17,90,59,-75,-72,108,-74,3,-65,-106,37,66,35,-62,-71,-37,-24,-51,103,-19,47,106,-95,-48,-56,95,66,-42,35,-17, 
  /* [19][0][][] */ -14,1,29,-1,17,-93,51,45,56,-85,-3,-40,-111,-4,-79,25,38,-112,65,18,-45,31,-68,-24,40,-97,1,-81,-107,-124,-79,13,31,-96,-6,-35,-22,-87,-73,-112,13,-118,-101,-20,-94,2,32,-99,5,-1,-60,16,-56,-11,-21,-41,-10,51,-20,-44,20,-76,59,23,-84,-28,-51,-29,-37,13,32,-71,-82,-121,-72,-93,-41,-127,-11,64,17,-120,-48,35,-93,-29,-19,-27,45,-1,-28,21,-60,70,29,-66, 
  /* [20][0][][] */ 9,41,55,77,-82,123,9,28,-12,2,-92,57,-12,50,13,-63,15,-59,-82,-43,-4,-45,-77,-12,38,-66,-107,72,25,-1,-34,126,69,53,-23,50,25,-52,-33,-61,11,-36,-74,-76,-28,-68,-68,73,37,-127,-97,79,15,69,28,12,73,69,53,80,71,-7,-47,-41,-37,-23,-56,15,-41,-37,-77,42,-58,-102,1,7,93,62,74,72,52,38,52,-35,33,60,-30,32,-6,54,14,87,46,18,-26,-20, 
  /* [21][0][][] */ 102,74,71,-88,46,-38,29,32,8,-90,-58,16,16,41,-16,-48,-95,-60,28,-49,102,-35,39,-93,21,-92,-28,89,-18,27,-26,5,-6,41,-74,-114,32,38,-74,-42,-24,-40,24,15,-46,-52,-60,29,-28,-32,-50,23,5,76,-117,14,-70,25,-89,127,31,-56,27,-38,28,64,-50,-30,-63,2,39,61,32,-48,68,26,-77,-26,72,92,-3,53,26,-83,36,-97,45,-60,-92,45,105,-91,-58,10,29,-55, 
  /* [22][0][][] */ 1,-73,-89,-110,49,-75,66,49,-108,48,-91,-119,70,-122,-124,-100,5,45,-96,-79,48,-89,0,0,52,-30,-125,59,-78,-94,-83,-121,15,26,-11,-17,-25,-41,-78,-126,-26,-39,-25,54,21,-127,53,-47,-51,-97,-23,12,-82,-105,-69,2,-37,-53,-46,-53,66,-92,-93,-125,-84,-10,-125,-66,68,62,-47,-29,-84,-21,28,-105,11,-32,28,54,64,-111,-47,-123,41,45,58,-56,-75,0,-83,25,-10,-10,-53,58, 
  /* [23][0][][] */ 12,-98,-29,12,43,-127,-30,-112,16,-101,33,26,-22,-120,-19,-59,39,-62,-104,48,45,-98,51,-62,-37,-47,39,-19,25,9,17,-66,-66,-4,-19,-7,56,-39,-117,-26,-127,-25,-18,-115,-88,-100,52,-2,52,-126,-101,-33,33,-83,-66,34,-98,-49,54,1,-118,-105,-68,-42,-7,-8,-121,-121,12,-40,57,-93,-40,-62,-63,-100,7,-48,46,65,-74,-75,-8,-26,41,-24,56,-45,-103,7,54,-43,55,-73,-56,34, 
  /* [24][0][][] */ -64,-28,-102,-78,-83,-127,-67,-62,67,75,75,15,82,41,-26,-86,-81,40,28,-50,80,-56,-50,-52,41,-31,57,17,68,45,-20,-64,-6,-3,34,7,-71,-56,49,-40,-72,-119,54,-2,-4,-29,30,41,-50,-36,-25,1,41,60,36,-67,6,37,3,-9,58,-33,26,44,-97,56,-29,-76,-94,9,-36,-24,-35,45,73,65,31,-68,-70,-67,-82,-109,-65,-88,1,53,-15,-65,22,-90,-8,-96,-42,22,-66,29, 
  /* [25][0][][] */ -98,-83,-91,-43,43,-89,-117,17,3,-119,-56,-9,31,-29,-125,-54,-95,11,-4,-125,19,42,-36,-78,-19,-74,-120,-4,25,-98,5,62,48,-119,8,21,43,-85,-45,-41,-95,41,-119,-24,43,-2,26,-2,-108,42,-95,-29,9,-50,-83,-19,-46,15,-106,39,62,9,5,10,-36,34,-46,-43,-108,-39,-58,-119,1,-127,32,-19,22,38,-13,-17,8,5,-10,41,-88,-75,-111,-110,-45,-65,49,-8,-122,-44,-43,-100, 
  /* [26][0][][] */ 52,-119,-22,8,-72,27,3,-44,-113,-114,23,83,-81,-80,-9,-34,127,-22,-101,-70,-17,23,43,7,2,33,-33,59,21,-23,-57,32,-64,-34,-119,-76,-61,22,-80,84,-40,95,-3,36,-34,7,-74,81,-59,-24,-27,112,-37,-58,-26,-94,68,71,5,17,2,-65,82,-8,81,6,-58,64,-31,83,27,44,38,-124,-116,0,46,-94,-100,-4,-46,87,6,-71,16,-49,-76,1,-110,46,19,35,-34,107,18,11, 
  /* [27][0][][] */ -21,-17,-78,-114,-125,-80,-86,-45,13,65,4,-102,-53,12,30,-47,28,-37,15,-92,-104,-21,-47,23,-106,1,-110,-26,16,-7,-51,-33,34,26,-106,-103,-64,-65,-113,40,-102,-10,-2,-11,54,-5,22,57,70,20,23,-83,-95,-92,-36,-61,46,-50,-85,-85,-70,-77,-51,13,7,-62,-123,55,10,-16,-127,-25,18,-13,-34,-95,13,-46,45,57,39,-50,64,-69,-86,-90,-50,0,-71,22,-55,-70,14,5,45,48, 
  /* [28][0][][] */ 54,-30,66,14,-127,-20,-112,-95,-23,-120,27,92,-96,-102,-25,62,59,74,-92,37,-50,-4,-104,-27,-98,44,-102,-80,-91,-96,-25,-41,-116,-11,46,35,41,-122,-64,12,68,14,-112,18,-112,-33,0,14,51,-81,-98,-58,-99,-5,19,24,23,-37,100,24,-34,-49,-113,-22,22,40,-47,45,-97,-6,-58,-60,36,11,-32,-113,-125,-47,-102,12,-93,-45,66,-8,29,-109,92,-99,-120,-84,-59,-17,-60,18,-78,-90, 
  /* [29][0][][] */ 23,56,52,-56,-109,-23,-127,46,117,-50,-52,-71,96,-92,-22,-18,-114,93,68,-46,-40,-20,41,-13,-17,-14,-13,-71,-110,28,24,-41,52,-28,-70,-63,9,124,21,82,-3,-17,-42,79,-31,101,-42,-23,39,4,61,-103,65,-49,115,20,-54,33,-44,84,-85,80,-94,-77,-74,-88,81,67,51,-71,44,-58,104,120,72,27,66,-43,-8,27,-14,-123,-3,-48,66,114,26,92,-19,101,46,34,-124,9,5,76, 
  /* [30][0][][] */ -5,-66,-67,9,-87,21,-61,-31,69,-37,-30,-42,-115,-13,23,-11,-21,5,51,-107,6,-113,-117,-7,-95,-4,-85,100,-10,-93,-86,-21,-96,-87,-127,-70,11,-42,-10,19,69,-68,-10,75,74,-67,59,45,-61,35,12,-89,76,-63,-22,63,-91,-63,-71,-77,-94,-14,-67,-30,-99,-90,-106,50,-72,76,11,-52,-102,65,6,-87,-70,-64,-88,-75,8,-3,-92,-21,-119,-1,-117,75,-55,-104,40,35,-50,-28,1,-85, 
  /* [31][0][][] */ 96,-65,42,73,14,42,-94,-63,-17,-59,-53,-104,99,-95,-25,111,-92,-91,18,13,71,27,-24,48,-17,-109,25,50,-101,-55,45,89,-27,38,-79,-28,53,-48,-31,-115,49,-124,-44,48,-9,-46,-26,-8,39,8,62,-81,-108,-57,-92,8,-115,51,-38,127,-47,-3,67,-99,43,118,-48,-69,70,-120,-110,23,-71,-46,15,-15,-70,-61,100,88,-77,-77,44,67,70,54,-86,14,20,-41,-75,-48,-1,93,3,-56, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024853560607880354, 0.0021280653309077024, 0.0026703563053160906, 0.00255252281203866, 0.0021888199262320995, 0.0021234438754618168, 0.0019052353454753757, 0.0021201085764914751, 0.0023058818187564611, 0.002359315287321806, 0.0019969618879258633, 0.0021446750033646822, 0.002777391579002142, 0.0027686429675668478, 0.0023526616860181093, 0.002156596165150404, 0.0020084839779883623, 0.0024204773362725973, 0.0019142556702718139, 0.0022060596384108067, 0.0023524598218500614, 0.0023021362721920013, 0.0021455711685121059, 0.0023076743818819523, 0.0024592839181423187, 0.0022424743510782719, 0.0022448708768934011, 0.0022977688349783421, 0.00206906464882195, 0.0021276862826198339, 0.0021326506976038218, 0.0021091967355459929, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 580, -98, 2696, 5563, 4582, -2398, 5514, -1270, -2303, -605, 6662, -4594, 4742, 4756, 2140, 2658, -819, -572, -1686, 4818, 2167, -1676, 2732, -674, -1613, 3140, 1898, 1538, 3982, 2400, 3245, 821, 1971, 5408, 5262, 2615, -306, 2061, 2734, -3947, -472, 1729, -453, 1326, -1411, 559, -2066, 764, -7201, 1311, 1212, -2738, 10903, -1096, 1770, 1023, 448, 1992, -977, -2211, 1, 1414, 201, 4962, 5734, 2828, 2897, 4696, 5745, -1147, 3175, 4057, 3054, -1272, 6112, 6897, -21, -4448, 427, 392, 12246, 2088, -1114, -3415, 1034, 638, 1205, -2376, 3368, -1216, 3840, 1218, 17, -5573, -901, 1247, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014106222079135478, 0.00024037351249717176, 0.00019290510681457818, 0.00011243765038670972, 0.00012370180047582835, 0.00014488163287751377, 0.00010804305202327669, 0.00019251726916991174, 0.0001785928470781073, 0.00024525393382646143, 9.7094809461850673e-05, 0.0001211932540172711, 0.00011029053712263703, 0.00012205120583530515, 0.00013839273015037179, 0.00016300752758979797, 0.00018721577362157404, 0.00019737861293833703, 0.00016894024156499654, 0.00011646130587905645, 0.00017803144874051213, 0.00016483037325087935, 0.00011740621266653761, 0.00016033847350627184, 0.00017069189925678074, 0.00019484845688566566, 0.00012492526730056852, 0.00020274965208955109, 0.00016830890672281384, 0.00017693899280857295, 0.00014528287283610553, 0.00018978535081259906, 0.00013205618597567081, 0.00011708223610185087, 0.00011984803131781518, 0.00017502855916973203, 0.00018442030705045909, 0.00017176415713038296, 0.00015058129793033004, 0.00013006992230657488, 0.00017830122669693083, 0.00014677057333756238, 0.0001714198588160798, 0.00017187728371936828, 0.00021744875994045287, 0.00012023554882034659, 0.00014352498692460358, 0.00017326424131169915, 0.00010326821211492643, 0.00020599132403731346, 0.00018080635345540941, 0.00016997386410366744, 6.0465001297416165e-05, 0.00018162549531552941, 0.00017810716235544533, 0.00017390743596479297, 0.00015623062790837139, 0.00017645317711867392, 0.00015049766807351261, 0.00016186427092179656, 0.00019897762103937566, 0.00016687264724168926, 0.00015797483501955867, 0.00011001954408129677, 0.00012347726442385465, 0.00014089290925767273, 0.00011559009726624936, 0.00014703662600368261, 0.00011396106128813699, 0.00015534587146248668, 0.00010673795623006299, 0.00012852725922130048, 0.00012895533291157335, 0.00016466654778923839, 0.00011369378626113757, 0.00011349450505804271, 0.00015237426850944757, 0.0001365374046145007, 0.00022328163322526962, 0.00017613514501135796, 5.8993526181438938e-05, 0.00015777563385199755, 0.00014218641445040703, 0.0001564658887218684, 0.00019468592654448003, 0.00012708058056887239, 0.00018486483895685524, 0.00017716683214530349, 0.00016406587383244187, 0.00016497574688401073, 0.0001416181621607393, 0.00011999335401924327, 0.00016846934158820659, 0.00010145871783606708, 0.000195114262169227, 0.00012761866673827171, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 6,96,-91,6,30,-14,81,91,-25,-28,29,-127,30,83,-87,6, 
  /* [1][0][][] */ -23,25,-59,-45,10,44,25,-127,27,-64,-8,-77,-47,-27,-60,-8, 
  /* [2][0][][] */ -16,-17,3,46,15,34,-86,127,-24,-21,54,-64,-26,-63,-48,60, 
  /* [3][0][][] */ 115,-96,55,10,-20,-27,-45,127,-39,34,62,44,-3,83,-15,8, 
  /* [4][0][][] */ -26,-32,0,45,-74,-11,-25,-127,6,-11,5,-9,22,17,94,65, 
  /* [5][0][][] */ 116,24,-37,-47,-73,38,33,76,2,1,80,107,105,15,-127,-14, 
  /* [6][0][][] */ 24,-59,-76,-38,-96,46,-23,-12,-14,-46,-11,-33,127,80,114,-11, 
  /* [7][0][][] */ -54,34,-20,-69,19,-39,-57,20,-59,30,-56,-55,-127,-50,15,56, 
  /* [8][0][][] */ 33,49,61,-10,48,16,65,3,45,-26,32,-15,-127,-32,-68,18, 
  /* [9][0][][] */ -35,87,39,-42,-11,-6,47,-32,-26,23,-61,20,33,127,24,23, 
  /* [10][0][][] */ 114,33,-59,109,-61,49,58,-59,-55,-49,-50,-127,-108,-23,20,123, 
  /* [11][0][][] */ 97,-8,46,51,-48,-33,-1,82,-127,42,-18,14,13,8,85,118, 
  /* [12][0][][] */ -55,15,-30,-32,41,12,127,81,-31,1,-13,-56,-61,63,-87,91, 
  /* [13][0][][] */ 9,35,-16,26,77,28,65,127,-14,54,-75,-98,2,51,-77,-3, 
  /* [14][0][][] */ -127,89,-1,-50,-1,-18,70,32,-34,22,119,-24,-91,-1,-59,25, 
  /* [15][0][][] */ -9,-27,-127,-38,61,-30,-74,-20,5,-8,-7,-77,11,-62,-73,39, 
  /* [16][0][][] */ 101,-46,3,-5,13,-20,26,-16,-50,41,127,73,66,4,-36,3, 
  /* [17][0][][] */ -25,35,6,-94,15,-55,127,-118,4,-46,-65,29,14,45,5,45, 
  /* [18][0][][] */ 10,127,1,-35,63,-66,-10,-79,-36,90,-34,19,-51,31,-5,-36, 
  /* [19][0][][] */ -79,-125,93,-127,30,-109,6,-15,16,91,101,121,52,-1,92,-40, 
  /* [20][0][][] */ -14,100,40,-21,24,-12,26,-29,46,-28,76,-30,-127,-40,-61,-22, 
  /* [21][0][][] */ -28,45,17,26,37,51,22,27,-127,61,-44,41,-13,27,-54,-44, 
  /* [22][0][][] */ -3,-66,17,-18,12,-127,112,39,16,-69,-32,-107,8,-109,-78,-42, 
  /* [23][0][][] */ -51,-127,64,74,1,-45,15,-64,-14,-5,89,9,40,81,99,110, 
  /* [24][0][][] */ -4,-33,27,92,54,11,-67,-127,108,30,-49,8,9,36,-47,-16, 
  /* [25][0][][] */ -35,34,33,-58,-24,11,4,-12,-16,86,-29,-27,35,127,22,13, 
  /* [26][0][][] */ -67,90,27,39,59,-121,8,-65,30,30,-4,114,-4,-11,-70,127, 
  /* [27][0][][] */ -19,-76,-60,-18,-51,77,21,-25,10,-48,58,-51,2,-29,-127,-7, 
  /* [28][0][][] */ -27,-26,35,72,5,-12,-45,-83,-127,59,84,-7,72,21,-26,-24, 
  /* [29][0][][] */ -127,121,-8,-48,1,22,-108,-77,-38,-30,-5,21,-19,-66,-77,40, 
  /* [30][0][][] */ 41,80,-64,67,-86,-86,-78,9,-47,-11,-14,-127,78,14,-19,63, 
  /* [31][0][][] */ 127,17,-50,-38,-48,16,77,17,-51,-29,71,54,25,16,-44,10, 
  /* [32][0][][] */ -17,9,127,23,-48,105,66,58,-16,-43,-12,-1,7,105,59,78, 
  /* [33][0][][] */ -14,48,-111,-108,-44,20,89,81,54,-31,49,-127,60,70,-115,2, 
  /* [34][0][][] */ -71,-35,92,74,-14,-49,127,-9,-125,62,23,-105,70,96,-49,-58, 
  /* [35][0][][] */ -16,-15,-36,16,-80,110,-32,-1,-59,127,-5,68,-42,55,-17,26, 
  /* [36][0][][] */ -15,-82,127,-35,-93,6,-29,-8,13,0,-60,58,7,-84,-53,67, 
  /* [37][0][][] */ 85,-14,40,-37,72,-76,-74,42,-73,95,-65,-11,-82,-66,127,-17, 
  /* [38][0][][] */ 16,86,60,-103,17,-36,-76,13,-57,13,-106,-42,-102,-127,-84,39, 
  /* [39][0][][] */ -82,36,-63,-62,-54,-109,55,-12,-127,-29,25,116,21,-29,23,53, 
  /* [40][0][][] */ 127,-10,34,-70,-104,9,21,-79,-81,22,-28,-56,61,67,51,25, 
  /* [41][0][][] */ 54,-46,-63,-68,19,-27,-64,-5,79,-19,-3,-68,127,-86,29,-18, 
  /* [42][0][][] */ -13,-62,-59,127,6,-105,-95,6,11,5,-18,36,-62,54,-42,-8, 
  /* [43][0][][] */ -93,-44,-50,-127,-30,6,0,58,47,-114,-39,52,-38,-63,-25,74, 
  /* [44][0][][] */ -16,55,70,-14,-53,-24,7,82,104,-83,37,97,127,36,11,-9, 
  /* [45][0][][] */ 12,117,-58,68,127,-112,-22,-105,109,-90,79,-35,-69,-26,-70,39, 
  /* [46][0][][] */ -56,-27,30,-11,107,-26,36,-4,-25,104,-62,-127,19,55,-36,76, 
  /* [47][0][][] */ 99,-65,-13,-11,71,-43,-53,-85,-10,127,-16,56,17,-120,-63,33, 
  /* [48][0][][] */ 33,15,-23,-125,-37,-37,120,-127,-10,-5,-57,35,65,92,-13,63, 
  /* [49][0][][] */ -2,127,-44,56,46,-56,21,37,-13,28,22,-49,-41,42,113,-107, 
  /* [50][0][][] */ 19,67,-51,14,-127,-7,-85,-61,58,71,23,26,-66,-48,7,13, 
  /* [51][0][][] */ 127,-27,-42,-31,-23,87,-68,-41,25,0,-17,76,-15,-62,6,20, 
  /* [52][0][][] */ 17,-15,40,92,-92,-96,-127,-42,-116,-87,-51,-113,-10,-77,46,70, 
  /* [53][0][][] */ 0,78,39,-127,23,83,66,7,-8,-22,4,-33,48,-91,-25,25, 
  /* [54][0][][] */ 21,127,-6,-19,-1,-99,-103,37,-21,-44,-47,113,42,55,31,48, 
  /* [55][0][][] */ -24,-12,85,17,52,-61,111,41,-127,0,13,64,120,25,14,-4, 
  /* [56][0][][] */ 127,-2,32,9,-64,100,-53,-70,-60,84,-53,26,-25,99,4,56, 
  /* [57][0][][] */ -39,-14,-71,-57,-50,-82,38,-17,-127,-30,54,54,0,4,-16,37, 
  /* [58][0][][] */ 76,-94,42,20,-28,-95,-1,-3,19,-12,-127,-27,48,-43,-45,60, 
  /* [59][0][][] */ 65,18,-117,63,-14,33,56,10,-72,-41,17,-127,-101,-48,-5,60, 
  /* [60][0][][] */ -5,25,-10,-4,4,-26,-16,-4,-38,-49,60,127,-32,-107,-11,-6, 
  /* [61][0][][] */ -35,7,36,-109,-71,56,21,127,-26,-78,68,44,55,-10,-3,96, 
  /* [62][0][][] */ 85,66,-34,-127,-4,13,16,-28,-18,24,-41,51,4,-28,-95,-98, 
  /* [63][0][][] */ 20,-18,-18,-11,-47,-83,-83,7,-56,-36,-69,-32,127,-15,68,-23, 
  /* [64][0][][] */ 18,8,0,19,-85,-49,-21,-91,61,127,41,26,3,-74,-12,58, 
  /* [65][0][][] */ -31,4,-5,-20,-67,74,35,-36,42,-91,74,-64,65,61,-127,26, 
  /* [66][0][][] */ -74,48,-87,-45,-4,-38,-108,-77,-127,102,76,18,-58,-45,65,55, 
  /* [67][0][][] */ -8,-36,-111,-127,66,65,9,-32,-27,1,54,-5,6,11,21,42, 
  /* [68][0][][] */ 49,12,-10,-62,-80,10,2,31,-87,92,127,5,-23,-55,-101,-28, 
  /* [69][0][][] */ 109,-127,53,-44,-8,-109,-42,103,-24,110,105,119,0,46,-11,-21, 
  /* [70][0][][] */ 71,22,99,17,127,-3,96,-11,12,46,-27,94,-34,55,-72,13, 
  /* [71][0][][] */ 19,6,65,-70,-127,-56,21,29,-29,-16,32,-108,-52,16,-27,29, 
  /* [72][0][][] */ -68,-78,38,-114,85,0,29,24,-76,9,-127,-13,34,96,-29,99, 
  /* [73][0][][] */ 7,49,44,-31,127,-88,-33,-20,-43,56,-75,55,-115,-101,123,-15, 
  /* [74][0][][] */ -108,35,-79,-42,80,-34,-22,-10,-68,-9,-127,-13,-59,-78,-15,47, 
  /* [75][0][][] */ 85,-14,34,-50,10,24,-127,-24,-31,-67,65,6,-23,-16,-3,-29, 
  /* [76][0][][] */ -3,-75,-33,122,-15,90,58,-36,47,-127,51,93,65,-62,-81,66, 
  /* [77][0][][] */ -41,-17,126,-17,34,-25,-21,-127,-1,31,44,124,33,44,25,-22, 
  /* [78][0][][] */ 7,-18,-3,-16,-30,-12,-1,18,14,-19,41,-110,-66,-31,-127,-37, 
  /* [79][0][][] */ -96,-107,-52,33,92,74,-41,78,-19,19,-11,45,-42,-52,-127,-26, 
  /* [80][0][][] */ 13,-112,57,127,-10,-42,-125,58,10,6,37,35,-99,-53,15,43, 
  /* [81][0][][] */ 86,46,-8,33,5,48,34,103,-17,23,127,76,123,37,30,3, 
  /* [82][0][][] */ -68,32,13,-42,25,-127,-119,-63,4,72,-57,-44,-55,87,-71,-47, 
  /* [83][0][][] */ 81,0,59,-14,-8,-18,-127,-31,43,-111,-17,-55,-19,-24,-10,-58, 
  /* [84][0][][] */ -24,-70,-80,-17,85,24,35,61,-127,8,-89,-64,44,-20,-61,9, 
  /* [85][0][][] */ -23,127,65,-72,126,2,67,-103,68,-30,33,10,49,-101,9,1, 
  /* [86][0][][] */ 104,-24,127,45,24,-50,67,36,-49,-56,-118,-58,27,3,-45,-1, 
  /* [87][0][][] */ 2,22,9,-82,87,-23,-36,-4,22,-42,69,-4,-86,-127,12,17, 
  /* [88][0][][] */ -52,-9,11,-14,20,32,-53,-32,-2,-6,-71,-127,-51,-51,-24,-12, 
  /* [89][0][][] */ -100,-12,5,-76,9,3,-127,46,68,35,-57,-21,0,-70,-57,-1, 
  /* [90][0][][] */ -21,8,-25,-88,127,34,-37,27,42,26,26,-2,9,-12,-60,-33, 
  /* [91][0][][] */ -40,-106,36,45,-63,-57,-15,68,-94,-30,-4,-61,45,34,55,127, 
  /* [92][0][][] */ -14,64,-7,-21,-37,57,-82,70,-62,-20,75,-25,-28,127,16,21, 
  /* [93][0][][] */ 14,86,-73,-60,56,127,-102,45,55,73,76,49,-110,48,-69,79, 
  /* [94][0][][] */ 39,36,68,16,-127,-45,22,-11,1,-5,34,-24,-29,4,22,-11, 
  /* [95][0][][] */ 25,34,1,-12,127,16,-108,98,-42,18,-59,108,9,41,72,-23, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015801192494109273, 0.0026925622951239347, 0.002160841366276145, 0.0012594789732247591, 0.0013856551377102733, 0.0016229026950895786, 0.0012102525215595961, 0.0021564969792962074, 0.0020005214028060436, 0.0027472306974232197, 0.0010876149171963334, 0.0013575555058196187, 0.0012354279169812799, 0.0013671659398823977, 0.001550216693431139, 0.0018259413773193955, 0.0020971118938177824, 0.0022109516430646181, 0.0018923970637843013, 0.0013045502128079534, 0.0019942328799515963, 0.0018463600426912308, 0.0013151346938684583, 0.001796043710783124, 0.0019120184006169438, 0.0021826098673045635, 0.0013993600150570273, 0.002271115779876709, 0.0018853250658139586, 0.0019819957669824362, 0.0016273972578346729, 0.0021258951164782047, 0.001479237456806004, 0.0013115056790411472, 0.0013424869393929839, 0.0019605958368629217, 0.0020657982677221298, 0.0019240293186157942, 0.001686748000793159, 0.0014569882769137621, 0.0019972547888755798, 0.0016440617619082332, 0.0019201727118343115, 0.0019252966158092022, 0.0024357689544558525, 0.0013468277174979448, 0.0016077060718089342, 0.001940832706168294, 0.001156766782514751, 0.0023074275813996792, 0.0020253162365406752, 0.0019039752660319209, 0.00067730335285887122, 0.0020344918593764305, 0.0019950810819864273, 0.0019480375340208411, 0.0017500292742624879, 0.0019765538163483143, 0.0016858110902830958, 0.0018131349934265018, 0.0022288630716502666, 0.0018692367011681199, 0.0017695671413093805, 0.0012323923874646425, 0.0013831401010975242, 0.0015782227274030447, 0.0012947913492098451, 0.0016470421105623245, 0.0012765435967594385, 0.0017401186050847173, 0.0011956334346905351, 0.0014397079357877374, 0.001444502966478467, 0.0018445249879732728, 0.0012735496275126934, 0.0012713173637166619, 0.0017068319721147418, 0.0015294342301785946, 0.0025011063553392887, 0.0019729912746697664, 0.00066082051489502192, 0.0017673358088359237, 0.0015927120111882687, 0.001752664684318006, 0.0021807893645018339, 0.0014235028065741062, 0.0020707775838673115, 0.0019845478236675262, 0.0018377965316176414, 0.0018479884602129459, 0.0015863467706367373, 0.0013441147748380899, 0.0018871222855523229, 0.0011364975944161415, 0.0021855873055756092, 0.0014295303262770176, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 1506, 18368, -7049, 3358, 4266, -3003, -6009, 4278, 14965, -5696, -5412, -453, -13711, 10411, -1903, 11472, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.4595642723143101e-05, 7.4886578659061342e-05, 4.2033178033307195e-05, 6.319288513623178e-05, 7.8877339547034353e-05, 7.6914308010600507e-05, 6.8286513851489872e-05, 5.6400949688395485e-05, 9.5716161013115197e-05, 6.5478619944769889e-05, 3.9197439036797732e-05, 5.7958353863796219e-05, 7.8342753113247454e-05, 7.0758309448137879e-05, 9.0434645244386047e-05, 6.7436805693432689e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -96,13,40,-37,-53,-29,-66,9,-19,3,-12,-9,78,61,22,-17,-20,-8,115,36,16,-44,127,86,73,18,-33,46,-45,-121,-65,0,-35,-22,4,-3,-14,5,-23,24,2,34,-90,9,-85,-31,18,116,27,5,-37,-57,-19,-22,12,-17,-76,-24,3,97,54,-6,-17,29,-14,-87,-30,44,-84,-47,66,13,29,-3,-56,-32,-23,62,-51,33,-45,63,74,-57,23,64,12,42,48,-44,-32,10,-34,-16,-37,21, 
  /* [1][0][][] */ 24,17,47,-71,-87,-2,-11,36,-8,-10,59,-69,-63,-39,-63,-41,9,-14,-54,28,-39,-75,-18,24,-31,-72,-19,-44,25,-60,127,-76,28,1,-11,58,55,80,7,-71,15,-11,-27,-33,34,86,-82,-35,-82,-48,26,16,47,-27,-20,30,-37,-8,-44,15,0,62,-30,-121,-39,20,-84,-10,6,9,-90,-22,-19,-24,9,-87,0,-24,66,-74,-42,-20,-84,-14,47,-36,-24,23,-110,9,-25,28,20,35,-17,40, 
  /* [2][0][][] */ 76,-22,12,0,53,-71,74,-46,34,-1,-32,8,-46,-32,28,-41,-96,-33,-61,62,-7,-48,-15,53,28,-74,-11,-11,-54,22,-85,127,-61,115,-22,54,-23,-12,-29,4,-84,115,77,2,-82,-4,-6,-30,38,13,-24,-47,28,-22,-17,50,74,5,55,8,-19,6,-44,38,71,21,21,22,43,53,-62,9,64,24,80,40,55,-45,37,75,98,14,-21,12,-56,55,34,17,26,-9,-44,18,-85,72,-33,15, 
  /* [3][0][][] */ -14,23,-83,35,41,-33,-8,-94,-51,92,45,72,57,15,-44,47,13,-40,12,9,60,127,72,-38,31,27,-4,5,108,-65,54,-27,5,41,-51,-20,7,33,28,47,-73,-47,-24,44,-60,-15,41,-45,-12,-51,-36,-54,44,-95,-16,-30,41,109,-16,-6,-4,-36,-58,37,26,21,-7,8,19,-14,34,-58,-63,-57,16,2,38,27,-81,-35,-32,4,-96,5,-60,-34,56,-30,39,5,5,-31,52,27,-81,71, 
  /* [4][0][][] */ 22,5,-36,-3,15,36,-26,-5,-39,33,80,-27,-48,-10,3,-54,6,-14,-43,42,4,-53,19,45,-67,-10,-127,28,-35,-53,36,35,-65,-49,16,68,15,50,34,21,-4,-43,61,-30,-2,56,-60,48,-57,49,13,9,48,-2,-70,7,18,-15,-27,10,32,11,3,-21,-57,16,-38,19,-20,16,-38,33,47,-63,-31,-37,30,-45,21,-19,-54,78,-69,13,-4,18,11,-60,12,-4,37,3,-53,-18,39,-6, 
  /* [5][0][][] */ -49,31,43,24,52,-33,57,-24,4,55,-40,-10,63,-17,-28,-31,-10,-13,73,19,-72,-31,-76,76,-53,24,62,15,55,-94,-3,43,33,127,-9,11,-13,-4,8,20,3,97,60,-30,-7,26,71,6,37,-8,-17,4,-2,-10,28,-52,34,-62,-21,-51,60,75,-41,29,86,-62,-43,-54,-73,-39,-13,25,-33,23,3,-10,1,3,-37,-18,117,-37,11,-79,-67,49,31,0,-3,29,-2,-16,-6,49,20,94, 
  /* [6][0][][] */ 65,-27,-59,66,-17,-76,127,59,-61,70,-42,55,-91,-70,45,23,-19,-52,-1,-16,21,-24,-82,-74,-49,81,84,21,44,4,108,-46,11,28,17,-86,5,1,22,116,41,7,-25,-38,7,-25,-50,28,-3,-113,-38,78,55,19,2,-43,46,48,57,6,-86,70,-86,-16,10,-14,-21,58,2,9,8,-17,-66,68,83,66,29,-20,65,-96,11,-48,-100,72,3,-49,23,24,-4,109,29,1,-10,26,-12,91, 
  /* [7][0][][] */ 14,52,1,-52,-50,6,16,43,-44,42,-55,-65,-56,20,1,-24,-21,-47,-12,18,-42,127,33,8,-5,-19,45,46,23,65,52,-31,78,33,-3,-15,10,-21,-1,-1,-99,-25,8,-38,45,-39,72,-16,26,-49,-78,12,-35,17,26,-43,7,-25,-110,1,5,107,60,-3,-28,43,-62,27,-49,-17,-120,25,17,64,-61,27,-55,29,14,-41,-9,-62,94,-90,47,-20,-38,7,-30,82,-65,53,31,-29,-19,40, 
  /* [8][0][][] */ 19,98,-49,59,-2,-42,-93,10,-109,11,-7,0,-36,0,51,93,3,-29,3,18,69,-16,-16,0,-54,67,5,5,-3,-20,-12,-33,-14,-41,-29,-61,-48,8,31,30,26,-46,17,14,-44,-58,4,-33,-14,-47,51,64,-4,-13,-57,121,-40,47,17,-18,-18,10,-7,26,-33,-83,-14,2,-32,-2,23,10,-29,-45,-118,-20,-32,35,-65,-75,-37,6,-88,-12,-5,21,28,50,29,37,-79,-31,-79,-127,10,-40, 
  /* [9][0][][] */ -39,-10,-127,36,-36,-48,65,56,13,2,-9,111,-4,7,56,118,13,14,71,26,24,23,59,-104,-21,-3,-19,4,12,-26,3,73,-25,13,-16,-105,-6,-8,-22,-11,-34,56,56,-28,-32,2,11,30,52,108,40,-27,-72,-101,3,8,30,-17,31,-22,-87,27,-54,-3,110,-23,22,10,-69,47,77,35,8,64,-4,-17,0,63,-83,20,51,-7,98,-10,37,-14,-6,-31,-41,-15,-5,27,52,47,-58,-30, 
  /* [10][0][][] */ 54,-47,-7,-23,-67,-19,58,23,41,-43,-13,0,-68,-24,-15,-5,-72,-50,47,22,-2,57,40,17,-17,52,16,-2,-66,-44,-36,-32,51,-32,25,-28,38,-90,62,87,-16,-49,-18,3,-3,-80,11,86,50,69,-47,-33,-34,9,-12,45,39,-91,60,33,-26,21,-28,8,2,-23,-9,53,-20,1,-6,37,127,41,20,-81,19,-61,46,24,-49,3,60,35,-9,-28,6,54,-64,4,25,79,26,69,-5,8, 
  /* [11][0][][] */ -57,-53,-8,-92,16,-4,-42,-62,85,-73,28,27,44,21,-2,59,-85,-2,55,45,-22,-7,-67,-83,34,26,-87,67,48,-94,56,1,30,23,2,3,-97,9,-120,51,-39,108,-57,53,12,26,-9,1,77,-36,-39,-115,4,-10,40,-20,10,-82,-17,-54,-13,-94,-46,-103,12,-100,77,107,109,42,121,-16,-15,-33,78,-18,115,88,24,68,-18,-2,15,127,88,38,12,-37,-39,-102,-16,66,48,63,45,70, 
  /* [12][0][][] */ 38,-34,-19,-30,8,69,8,19,47,48,16,35,46,68,13,8,-74,30,39,35,127,7,60,-52,32,20,-69,-85,8,41,-14,9,32,13,-5,-56,-4,-16,-16,1,21,6,54,102,-16,18,0,-17,-38,8,-35,-34,-3,-57,-9,12,2,38,5,20,33,-79,17,-64,13,78,1,-46,-25,-58,107,21,-24,27,2,87,-14,58,-82,-15,-25,2,99,25,-24,44,-19,-65,68,8,-73,64,64,27,-37,-83, 
  /* [13][0][][] */ -4,4,-39,-32,-36,-33,43,-70,5,-23,-16,-51,76,-66,-37,-70,-52,-51,-73,-33,-49,15,47,87,-3,3,77,-4,35,-64,-4,6,13,-13,-127,101,-53,-51,50,-31,70,28,-6,72,-28,-85,62,-32,63,-4,-70,-42,37,-49,-14,56,91,-33,-32,-19,38,35,7,-53,16,33,-30,39,-58,-39,-58,-5,-73,12,-11,-50,-78,15,-9,87,1,52,36,-80,14,7,35,-16,-10,-16,-12,41,-59,40,-55,0, 
  /* [14][0][][] */ -11,39,-115,-12,97,49,-86,-39,13,-31,63,4,46,-8,-16,-33,-58,26,15,127,48,-37,15,8,31,23,-25,85,35,-37,-39,19,75,5,-28,29,-4,41,55,26,63,21,40,6,-46,-49,45,-29,30,-4,-22,-51,36,15,-30,44,16,83,-67,-8,-13,-52,-56,-69,13,-61,-6,17,-16,38,-23,44,-6,-51,-8,-19,53,19,-56,-18,16,20,9,-14,-38,50,8,-39,-4,36,28,0,8,-24,-71,-49, 
  /* [15][0][][] */ -73,-47,81,-71,-17,4,-22,-48,15,-2,2,46,-20,-45,9,58,-104,-38,34,-76,-20,0,8,-75,50,-27,31,-59,-81,-70,-51,16,-56,25,67,-107,-8,-13,39,-59,-44,-10,13,-12,28,18,60,102,-57,-18,41,-25,-28,36,-4,-69,-69,-36,80,-3,-44,15,-69,18,-66,24,-23,25,12,-45,26,-40,76,-15,-40,-54,1,-11,60,38,-19,43,82,37,30,-34,-127,16,-35,-19,-39,13,33,-27,9,51, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0023203147575259209, 0.0031826796475797892, 0.0017864099936559796, 0.0026856975164264441, 0.0033522869925945997, 0.0032688579522073269, 0.0029021766968071461, 0.0023970403708517551, 0.0040679369121789932, 0.0027828412130475044, 0.0016658911481499672, 0.0024632299318909645, 0.0033295669127255678, 0.0030072280205786228, 0.0038434723392128944, 0.0028660641983151436, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -3338, -1403, -7135, -1893, 669, 3972, -4513, -361, -203, 361, 6944, -2391, 1208, 7361, 7261, -10124, 23957, 2084, -6814, 294, -838, -2375, -4550, -1775, -49, -2895, 7840, -4674, 864, -6996, -8633, -179, 17949, -3494, -8102, -434, -107, -3105, -30, 6486, 5534, -375, 3147, -2835, 8172, 17437, -6197, 12625, -4501, 8014, 12420, -4813, 1223, -9620, 1308, 8775, -2472, 3594, 9412, 3116, 7876, 10401, 11724, -18183, -1535, -1791, -2439, 2993, 1025, -3340, 5474, 7160, 14831, -790, -1300, 16608, -128, 1909, 12697, 1134, 1148, 9814, 2316, 570, 10556, 2656, -1390, -4996, 10824, -8108, 21012, -1490, -6335, -2046, -5390, -5075, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00017336725431960076, 0.00022509426344186068, 9.0543187980074435e-05, 0.00016040557238738984, 0.00019245718431193382, 0.00028844282496720552, 0.00027098433929495513, 0.00022565436665900052, 0.00019576644990593195, 0.00015339582751039416, 0.00012967329530511051, 0.00020344692165963352, 0.00018758342775981873, 0.00012979474558960646, 9.3853865109849721e-05, 8.106596942525357e-05, 0.00010288654448231682, 0.00022728234762325883, 0.00010960282088490203, 8.7461652583442628e-05, 0.00012497755233198404, 0.00019869636162184179, 0.00027556336135603487, 0.00015657645417377353, 0.00046201830264180899, 0.00017718598246574402, 0.00023698616132605821, 0.00010910877608694136, 0.00019266922026872635, 8.9445420599076897e-05, 0.0002379336510784924, 0.0001710121869109571, 0.00011216674465686083, 0.00013954016321804374, 0.0001449037081329152, 0.00023797305766493082, 0.00018641422502696514, 0.00015135966532398015, 0.00023297822917811573, 9.1720787168014795e-05, 0.00014585007738787681, 0.00021877087419852614, 0.00020686499192379415, 0.0001531692105345428, 0.00018487889610696584, 7.7043296187184751e-05, 0.00020153298100922257, 0.00013578451762441546, 0.00017318132449872792, 9.635149035602808e-05, 9.8734075436368585e-05, 0.00015482088201679289, 0.0002141740988008678, 0.00010230056068394333, 0.00018651671416591853, 0.00011601265578065068, 0.0001986588176805526, 0.0001972900063265115, 0.00016043426876422018, 8.9890141680371016e-05, 0.00013305003813002259, 0.00017125980230048299, 0.00011917851952603087, 6.0618225688813254e-05, 0.00016090564895421267, 0.00024452479556202888, 0.00022050330881029367, 0.00020985859737265855, 0.00018005142919719219, 0.00010914894664892927, 0.0002220491151092574, 0.00011908444139407948, 0.00010249362094327807, 0.00023047383001539856, 0.00031593264429830015, 8.2717248005792499e-05, 0.00011922964040422812, 0.00023417880584020168, 0.00014252064283937216, 0.0002615630510263145, 0.00021607050439342856, 8.9643268438521773e-05, 0.00024913030210882425, 0.00015394724323414266, 0.00010218218085356057, 0.00015688163693994284, 0.00018534206901676953, 0.00013496664178092033, 0.00015252080629579723, 0.00014072211342863739, 4.9160549679072574e-05, 0.00021665001986548305, 0.00018441436986904591, 0.00026537623489275575, 0.00013718732225243002, 0.00022019357129465789, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 79,86,70,-11,-37,-19,56,29,83,-81,-127,19,-23,-7,5,-42,-122,24,81,53,68,71,94,46,44,-38,-72,-30,-19,-17,32,-16,-114,34,7,127,-12,50,-12,57,-5,-82,-11,43,6,-24,16,24,-22,-79,14,20,-24,120,-22,-3,-67,-80,0,-104,-39,-9,-90,79,-29,51,-39,-37,-46,-4,11,-19,-4,27,16,-40,-6,-69,-105,14,16,-67,50,-14,-80,-75,-28,57,-127,40,-76,73,61,0,38,45, -14,-12,-5,53,-28,82,-38,-9,75,47,-93,86,-88,-84,-103,89,-61,46,37,56,127,26,59,80,61,9,-1,52,21,127,25,-119,79,92,26,79,25,77,-31,-116,127,7,67,58,-61,-118,127,-13,-18,-76,-42,-15,1,127,-46,-114,24,4,-64,-26,22,-127,-76,105,-50,118,30,-61,12,94,106,-36,-31,40,-37,-67,18,-49,-21,127,-8,-64,116,-80,-127,-48,28,105,36,65,-121,25,127,-21,127,46, 37,-30,5,16,-45,-13,-3,38,43,48,-40,2,-57,51,-35,-59,-24,16,90,22,28,0,56,110,67,40,-13,80,-20,45,24,-87,-127,-123,-6,93,22,-39,-10,18,-14,34,-27,127,17,-127,4,42,36,-5,-20,23,-26,19,27,19,49,-127,-20,-65,-127,-10,-84,42,41,-4,-58,-35,-65,-43,-19,-10,41,4,-10,41,-25,-32,-30,27,18,-127,75,-15,-46,-77,-26,49,-107,28,-51,79,24,8,22,6, 
  /* [0][1][][] */ 127,5,95,127,-1,-74,127,12,-41,-127,-21,127,3,-127,-17,97,-127,-49,127,18,-97,20,-60,-127,-17,29,-127,79,-71,32,127,91,2,125,32,46,-99,55,-48,-35,28,-127,-1,56,-67,7,51,-127,-44,-127,-116,22,127,-7,39,18,-127,20,-48,-26,-11,-17,-36,50,-56,-25,54,-76,-69,112,-62,-127,-127,48,127,-127,108,33,-97,-48,127,-5,-73,115,42,4,-27,64,3,42,-127,46,15,-98,26,-3, -117,27,-116,88,-94,-127,-112,-127,39,2,45,71,-91,-39,-63,117,-55,-127,96,127,-10,-127,-127,93,-127,127,2,127,-36,-17,-83,56,-94,72,127,-81,0,127,127,-46,-79,46,-4,40,1,-77,-48,-76,17,-48,-127,71,39,102,5,-127,32,32,74,-26,-109,-33,-127,93,10,-127,127,127,17,127,-127,-104,-14,30,-97,-111,127,127,50,-64,-93,-15,-127,14,-76,-31,127,127,58,127,-111,-127,-73,-26,61,127, 66,19,102,9,6,-4,26,28,-50,62,-80,111,-1,31,-127,127,-29,-28,61,19,-106,-34,-57,-28,24,21,82,14,127,56,49,-127,-45,-127,8,60,-127,41,-29,-127,-14,122,4,86,21,8,0,-79,127,-41,-100,17,-11,-43,-127,91,68,-9,-127,127,-22,-54,-5,90,127,-35,-74,2,-99,38,-61,-47,-112,-127,-19,-91,-77,-5,-127,-28,-59,-83,-8,127,-53,4,-13,37,-46,8,-36,68,7,127,16,-19, 
  /* [0][2][][] */ -2,-127,116,-48,53,2,40,80,-50,-54,31,-97,34,-26,28,62,-86,3,-44,37,-4,78,46,-70,12,-1,-42,-19,-19,10,26,5,-47,32,11,34,33,6,-8,-30,-28,1,-27,-64,-127,-77,38,-47,23,-6,29,31,-56,34,-44,66,-24,19,41,70,29,-5,23,32,-20,72,-10,-8,21,88,37,39,-117,10,28,-52,-18,-58,-49,-15,-42,96,-41,3,-37,26,-51,-28,-72,71,-42,17,12,-5,-26,-51, -96,-4,44,-64,127,71,-18,7,-127,-6,-26,-91,127,16,-21,67,-31,57,-104,-14,-2,36,55,56,95,-113,-25,14,-53,121,6,56,2,59,29,12,120,42,48,-109,-48,17,-127,31,-17,-83,3,-42,1,-31,-5,127,16,-18,-22,-109,3,102,-2,39,-4,-62,49,127,-10,38,0,6,127,72,2,61,-102,0,-7,-63,53,-82,-56,-29,-50,-33,-33,-41,18,127,45,-23,53,7,50,27,-4,13,30,-31, 8,14,127,-116,11,-9,25,51,-4,14,35,19,2,3,6,90,-57,9,75,42,-26,57,44,-37,19,16,-22,71,-24,-17,18,-33,-94,-15,10,30,34,-31,-4,-9,-22,-5,12,-59,-57,-111,26,-51,61,28,-78,-32,-68,13,19,65,19,-13,-2,116,-37,18,13,22,55,35,-121,39,15,-31,-8,42,-31,20,3,2,-63,-14,-25,-25,-19,9,-3,20,-32,26,-22,-4,-101,56,-26,24,2,39,19,-18, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.008687295950949192, 0.011279295198619366, 0.0045370473526418209, 0.0080377962440252304, 0.009643876925110817, 0.014453641138970852, 0.013578810729086399, 0.011307361535727978, 0.0098097017034888268, 0.0076865437440574169, 0.0064978264272212982, 0.010194564238190651, 0.0093996571376919746, 0.0065039121545851231, 0.0047029429115355015, 0.0040621515363454819, 0.0051555633544921875, 0.011388938874006271, 0.0054921107366681099, 0.0043826340697705746, 0.0062625259160995483, 0.00995651725679636, 0.013808262534439564, 0.0078459223732352257, 0.023151371628046036, 0.0088786492124199867, 0.011875188909471035, 0.0054673543199896812, 0.0096545023843646049, 0.004482039250433445, 0.011922666803002357, 0.0085692852735519409, 0.0056205866858363152, 0.0069922474212944508, 0.0072610103525221348, 0.011924641206860542, 0.0093410694971680641, 0.0075845126993954182, 0.011674354784190655, 0.0045960559509694576, 0.007308431901037693, 0.01096243504434824, 0.01036584097892046, 0.0076751881279051304, 0.0092641348019242287, 0.0038605786394327879, 0.010098658502101898, 0.006804055068641901, 0.0086779789999127388, 0.0048280968330800533, 0.0049474863335490227, 0.0077579515054821968, 0.010732094757258892, 0.0051262001506984234, 0.0093462048098444939, 0.0058133024722337723, 0.0099546359851956367, 0.009886045940220356, 0.0080392342060804367, 0.0045043239369988441, 0.0066670323722064495, 0.0085816932842135429, 0.005971941165626049, 0.0030375313945114613, 0.0080628544092178345, 0.012252944521605968, 0.011049246415495872, 0.0105158481746912, 0.0090222349390387535, 0.0054693673737347126, 0.011126705445349216, 0.0059672272764146328, 0.0051358742639422417, 0.011548860929906368, 0.015831135213375092, 0.0041448958218097687, 0.0059745027683675289, 0.011734514497220516, 0.0071415966376662254, 0.013106717728078365, 0.010827122256159782, 0.0044919531792402267, 0.012483722530305386, 0.0077141742222011089, 0.0051202680915594101, 0.0078612146899104118, 0.009287344291806221, 0.0067630712874233723, 0.0076426966115832329, 0.0070514734834432602, 0.0024633961729705334, 0.010856160894036293, 0.009240858256816864, 0.01329779252409935, 0.0068743480369448662, 0.011033725924789906, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 9280, 3030, 643, -670, 7478, 19813, 6464, 3468, 340, 9791, 1804, -4808, 3543, 4963, -793, 80, 7281, 10731, -1954, -408, 5965, 7904, 10336, -1312, -5564, -270, 19877, -464, 1662, 855, 14343, -1448, 15766, 5420, 3938, -4116, 423, -5538, 1292, 2779, 2756, 2708, 1926, -2595, 2044, 1318, 5036, 4434, 4189, 2983, 7160, 871, -2284, 607, 2099, 2468, 4380, 5764, 5130, 653, -1081, 6255, 4553, 9278, 4621, 11899, -3609, 3244, 9247, -1579, 5739, 3403, 1726, 3243, 4331, 3221, -494, 2475, 4104, 3306, 6006, 2978, 6282, 662, 4244, 8796, 744, -2492, 49154, -182, 771, -1127, 13292, 4687, -411, -1051, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.3254431956447661e-05, 0.0001275373506359756, 0.0001976633066078648, 0.00019805179908871651, 0.00010078233754029498, 4.7593228373443708e-05, 0.00011278381862211972, 0.00011619983706623316, 0.00011069031461374834, 7.9416342487093061e-05, 0.00014886415738146752, 9.6604111604392529e-05, 0.00013836106518283486, 0.000117807365313638, 0.0001572126493556425, 0.00015502781025134027, 0.0001046665056492202, 7.4924719228874892e-05, 9.5421499281655997e-05, 0.00012173057621112093, 9.3329181254375726e-05, 0.00010658047540346161, 8.181256998796016e-05, 0.00014506763545796275, 0.00011012377217411995, 0.00015248691488523036, 5.0869624828919768e-05, 0.0001680339191807434, 0.00012364068243186921, 0.00016339984722435474, 6.1004626331850886e-05, 0.00012829624756705016, 5.7009452575584874e-05, 0.00011256647121626884, 0.00013477627362590283, 0.00012060620065312833, 0.00016432975826319307, 0.00010041936911875382, 0.00010104211833095178, 0.00011757337779272348, 0.00014168561028782278, 0.00010580685921013355, 0.00015974274720065296, 0.00011606320185819641, 0.0001890319399535656, 0.00018525584891904145, 0.00011172959057148546, 0.00013182726979721338, 0.0001184798456961289, 0.00016148782742675394, 9.7223237389698625e-05, 0.00022904107754584402, 0.00017295980069320649, 0.00025260864640586078, 0.00016201753169298172, 0.00013876236334908754, 9.1923167929053307e-05, 8.0647158029023558e-05, 0.0001364623021800071, 0.00025507583632133901, 0.00015510736557189375, 0.00011017095675924793, 0.00011177986016264185, 7.9417266533710063e-05, 0.00012513858382590115, 6.3498177041765302e-05, 0.0001411313860444352, 0.00012262190284673125, 7.4505005613900721e-05, 0.00017499594832770526, 0.00010480223863851279, 0.00010389758244855329, 0.00019646954024210572, 0.00013846310321241617, 0.00012287157005630434, 9.8171782155986875e-05, 0.0001733930257614702, 0.00014792793081142008, 0.00011433158942963928, 0.00014392002776730806, 8.8921202404890209e-05, 0.00011124580487376079, 0.00010517492773942649, 0.00012779816461261362, 0.00010197785741183907, 9.1794645413756371e-05, 0.00013313398812897503, 0.00013974591274745762, 2.2807147615822032e-05, 0.00017531722551211715, 0.0002297839819220826, 0.00022857911244500428, 6.471553206210956e-05, 9.9543132819235325e-05, 0.00020815087191294879, 0.00012463793973438442, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -71,38,-17,15,-88,-30,-26,21,12,-30,61,-121,127,-65,33,-94, 
  /* [1][0][][] */ -70,90,-52,-127,-16,14,22,37,-65,-19,76,-33,48,48,-6,16, 
  /* [2][0][][] */ -49,-16,-44,-14,-21,-31,39,-25,-46,83,51,-34,37,23,-19,127, 
  /* [3][0][][] */ -78,-76,-10,-49,-76,19,-36,-81,-25,9,61,-63,-56,-23,-127,-17, 
  /* [4][0][][] */ 70,-10,34,38,-75,-41,-127,48,-6,40,20,15,10,11,-4,-105, 
  /* [5][0][][] */ -52,102,-90,-37,50,-39,-16,-122,30,-33,75,-70,43,-79,-115,-127, 
  /* [6][0][][] */ 10,-24,-22,-11,-60,99,35,-45,-6,-79,127,-8,-30,-1,-91,13, 
  /* [7][0][][] */ -14,124,127,-101,-15,36,6,-61,-7,102,-115,-65,12,38,28,99, 
  /* [8][0][][] */ -9,-16,34,26,108,-3,79,61,-89,17,-59,2,47,125,-109,-127, 
  /* [9][0][][] */ 8,72,91,-22,-95,-11,-5,-74,63,20,127,63,-35,-83,23,2, 
  /* [10][0][][] */ 12,-64,-4,-66,-127,76,16,-20,-1,-72,25,55,-4,-9,-62,-15, 
  /* [11][0][][] */ 119,-45,14,47,-127,-59,50,-35,110,79,-29,-1,-14,-85,0,113, 
  /* [12][0][][] */ -21,-42,127,-33,80,-21,8,27,44,14,66,48,-11,19,-109,-8, 
  /* [13][0][][] */ -3,17,-9,-18,6,22,127,6,-79,-1,-4,-24,-33,100,77,-28, 
  /* [14][0][][] */ 127,-76,81,38,32,45,37,14,27,8,68,65,59,-16,14,-84, 
  /* [15][0][][] */ 8,127,-10,-30,24,111,-93,78,-60,-21,-83,-33,-60,99,-16,-21, 
  /* [16][0][][] */ -54,59,124,-90,28,101,17,2,-5,20,0,54,58,-9,105,127, 
  /* [17][0][][] */ 68,127,61,-44,-7,-49,0,-101,-93,21,50,67,-63,-26,62,-83, 
  /* [18][0][][] */ -53,20,-53,-14,124,37,-39,-25,-4,47,96,82,-32,127,-5,-6, 
  /* [19][0][][] */ 53,118,37,79,58,-15,-11,59,-43,83,53,121,57,127,-88,63, 
  /* [20][0][][] */ 113,-2,8,31,-84,-31,-70,17,-9,-34,-127,-28,122,-101,23,-21, 
  /* [21][0][][] */ -63,-90,-24,50,0,30,-127,63,53,-39,-1,18,-17,44,-55,-7, 
  /* [22][0][][] */ 6,-40,-48,-7,127,12,-23,47,45,22,41,21,-5,48,-29,19, 
  /* [23][0][][] */ -86,23,-28,-35,17,59,70,99,-41,127,-5,-38,5,-2,-90,-15, 
  /* [24][0][][] */ 28,-104,30,23,127,-15,24,-12,19,64,53,64,-54,61,17,-38, 
  /* [25][0][][] */ 127,-40,69,-1,-14,-39,-74,59,67,5,-59,7,111,-49,60,27, 
  /* [26][0][][] */ 23,24,103,56,45,-40,-50,-33,26,96,14,127,25,-75,-21,-79, 
  /* [27][0][][] */ -39,75,-10,-6,4,33,3,-127,1,-106,66,39,74,-57,82,97, 
  /* [28][0][][] */ -57,-30,-92,-121,-7,-112,45,28,-127,90,-50,-8,-20,58,-20,92, 
  /* [29][0][][] */ 67,100,-33,90,9,57,-53,15,28,12,-11,21,-127,53,18,101, 
  /* [30][0][][] */ -34,67,-109,-45,39,-86,28,-4,-93,81,-101,-50,18,59,-44,127, 
  /* [31][0][][] */ 34,-39,127,28,21,-76,-67,31,-64,23,52,-23,-82,69,22,126, 
  /* [32][0][][] */ -56,94,16,60,-127,13,27,68,-14,-105,5,-98,17,15,74,82, 
  /* [33][0][][] */ -55,-6,48,72,-30,-21,-44,-5,-30,-7,-11,-33,-24,3,21,127, 
  /* [34][0][][] */ 0,24,-87,-127,79,-33,-23,54,50,-33,11,-6,-85,-52,-18,126, 
  /* [35][0][][] */ 72,-38,21,8,-9,29,-105,-9,-41,-127,-62,13,28,-57,70,-43, 
  /* [36][0][][] */ -20,5,-127,-19,52,111,26,49,-21,-17,1,7,15,20,-52,64, 
  /* [37][0][][] */ 67,79,-5,-73,101,-127,38,-46,-109,41,-96,42,8,33,36,73, 
  /* [38][0][][] */ -46,119,32,-53,62,7,76,-127,29,-29,-113,44,-14,-79,-108,-33, 
  /* [39][0][][] */ 84,64,-127,-97,14,0,27,-68,44,8,-26,-17,22,1,-117,-55, 
  /* [40][0][][] */ -19,-11,-60,-77,-78,-20,19,-127,-19,-22,-36,-79,20,72,99,109, 
  /* [41][0][][] */ -38,-52,58,127,23,-83,-118,-89,-61,-48,29,-52,-113,-6,49,59, 
  /* [42][0][][] */ -7,60,-20,-127,34,22,0,14,25,10,-1,6,69,-11,-35,2, 
  /* [43][0][][] */ 27,65,30,51,127,70,10,17,29,35,3,-26,-116,-15,5,-66, 
  /* [44][0][][] */ 52,-51,42,33,-20,-33,-10,33,33,-19,2,11,127,3,-46,-5, 
  /* [45][0][][] */ 28,-69,-88,27,-29,-55,-2,39,42,-39,34,48,-105,127,35,-54, 
  /* [46][0][][] */ -30,-110,30,42,5,-32,-72,73,-4,-9,21,-26,21,127,52,99, 
  /* [47][0][][] */ -27,-64,39,64,18,-7,27,-8,42,-34,-127,-13,52,-28,-72,-15, 
  /* [48][0][][] */ -64,81,-51,-17,24,108,-1,-79,-5,-31,55,-83,102,-127,-46,-42, 
  /* [49][0][][] */ -46,-5,44,-24,-38,15,82,127,-52,-39,4,-12,-12,51,-36,40, 
  /* [50][0][][] */ 61,17,-97,73,-1,-127,-81,16,-111,33,-35,-1,16,-68,-123,-49, 
  /* [51][0][][] */ -29,15,-20,127,0,49,-47,-31,-4,-49,7,-42,5,36,-17,82, 
  /* [52][0][][] */ -97,-20,18,4,18,39,76,-14,8,-92,-27,3,-66,-51,-127,-11, 
  /* [53][0][][] */ -34,-77,-51,-127,17,-25,4,62,60,-38,-65,33,-10,-5,25,53, 
  /* [54][0][][] */ -4,-90,2,47,-108,29,63,25,-46,-68,43,-12,-72,-13,-127,32, 
  /* [55][0][][] */ -15,-29,-16,19,80,-40,75,74,13,-26,-127,-12,73,-26,-55,25, 
  /* [56][0][][] */ 70,-9,-77,-37,-127,-16,-96,-18,-14,-24,-21,33,99,-78,59,25, 
  /* [57][0][][] */ -99,-21,39,-81,108,-36,31,32,-81,106,31,-4,-49,75,-127,-45, 
  /* [58][0][][] */ 40,18,-19,-13,23,-32,-66,-50,34,-127,-61,1,-89,-25,-27,63, 
  /* [59][0][][] */ -33,19,-35,-16,-29,68,-82,-71,59,127,-47,7,-38,20,-8,27, 
  /* [60][0][][] */ -1,-90,17,18,-127,-57,8,40,-9,76,1,66,10,-31,53,47, 
  /* [61][0][][] */ 30,7,-66,-4,-58,-28,-127,-61,-53,1,10,77,53,-38,61,47, 
  /* [62][0][][] */ 79,-18,71,-57,15,79,84,116,-65,83,16,94,34,105,127,100, 
  /* [63][0][][] */ 21,-102,-22,-11,-84,-8,57,10,-8,-42,-9,-60,-47,127,105,80, 
  /* [64][0][][] */ 19,13,-127,-45,17,59,3,-33,19,-64,63,18,74,-67,-72,77, 
  /* [65][0][][] */ -50,-48,34,24,96,-9,116,105,-26,-16,-98,-64,60,127,-104,-7, 
  /* [66][0][][] */ -44,-91,8,-93,-43,-127,24,-6,13,7,3,71,-55,-48,-28,53, 
  /* [67][0][][] */ 25,-19,-68,-32,-127,81,-21,-118,-63,15,-59,-97,33,-43,-56,28, 
  /* [68][0][][] */ 113,99,72,-55,-104,-6,-42,-90,-68,-127,19,0,-18,-64,44,-7, 
  /* [69][0][][] */ 65,37,-6,-33,4,-40,-79,32,-3,127,-57,9,-7,26,18,-66, 
  /* [70][0][][] */ 43,-36,-18,71,-69,42,0,-127,107,95,19,111,76,-59,9,7, 
  /* [71][0][][] */ 86,-46,5,24,-79,15,75,-42,127,27,-12,16,94,-55,37,30, 
  /* [72][0][][] */ 11,-4,37,79,32,9,-127,89,88,-2,17,-19,10,-27,-96,86, 
  /* [73][0][][] */ 34,38,56,-121,49,-101,-88,69,-1,127,-43,15,-35,-32,68,-34, 
  /* [74][0][][] */ 65,30,23,-1,-127,-29,5,-20,-69,-25,15,-47,57,-63,-5,-7, 
  /* [75][0][][] */ 75,103,-67,35,68,53,3,-45,-52,21,61,127,-103,77,85,73, 
  /* [76][0][][] */ -61,-36,-8,-37,-37,-26,100,-31,-54,35,57,69,-21,-127,-7,80, 
  /* [77][0][][] */ -103,99,-44,6,-7,-50,60,105,36,-10,-8,12,-27,24,-51,127, 
  /* [78][0][][] */ 104,15,-31,8,-30,43,-127,-44,2,-69,-74,43,34,-92,8,49, 
  /* [79][0][][] */ -28,-44,43,74,15,-51,-33,-13,-9,27,-19,18,-19,127,-71,17, 
  /* [80][0][][] */ 77,90,44,-127,-40,103,80,-39,36,-39,-40,56,119,-70,0,-48, 
  /* [81][0][][] */ 99,-51,-11,-125,127,22,-65,78,103,5,-16,-50,39,40,-116,-109, 
  /* [82][0][][] */ 50,-21,75,42,127,-88,60,33,1,72,-38,30,-23,4,6,-69, 
  /* [83][0][][] */ -45,35,26,16,84,14,127,51,-10,62,-65,-1,-69,54,-8,-43, 
  /* [84][0][][] */ 37,-36,-66,41,-13,-67,-120,43,-113,87,-6,80,-127,114,-16,-80, 
  /* [85][0][][] */ -120,0,-16,-5,-21,-18,-68,17,10,86,8,-90,-127,-115,-92,10, 
  /* [86][0][][] */ 25,41,55,127,67,-39,49,39,30,35,-41,-23,21,79,-112,-88, 
  /* [87][0][][] */ -4,88,127,-18,-121,-70,31,8,17,-9,18,31,-68,16,2,-13, 
  /* [88][0][][] */ 9,-107,-101,-5,38,-7,-45,-28,12,-99,-116,-64,127,-53,-2,18, 
  /* [89][0][][] */ 40,12,24,-115,19,-73,-72,76,117,-6,18,-127,28,-4,22,-66, 
  /* [90][0][][] */ -22,48,13,-6,-8,26,51,127,10,-48,1,120,45,5,-36,54, 
  /* [91][0][][] */ -64,0,-23,-5,53,63,-11,-115,-39,2,10,14,-80,-127,-30,-12, 
  /* [92][0][][] */ -39,11,44,-15,-127,-50,-105,73,-59,60,71,98,-36,16,50,-24, 
  /* [93][0][][] */ 87,2,95,67,-127,-66,-46,-4,-73,-74,5,-9,14,-27,30,29, 
  /* [94][0][][] */ -41,-106,36,-127,31,6,-25,-7,60,-16,-32,27,1,20,-73,48, 
  /* [95][0][][] */ -17,-73,-12,-73,95,127,-53,-2,59,2,-45,62,-10,100,-98,-14, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0013252990320324898, 0.0020302238408476114, 0.0031465352512896061, 0.0031527194660156965, 0.0016043198993429542, 0.00075762043707072735, 0.0017953673377633095, 0.0018497457494959235, 0.0017620415892452002, 0.001264201826415956, 0.0023697181604802608, 0.0015378081006929278, 0.0022025229409337044, 0.0018753354670479894, 0.0025026148650795221, 0.0024678350891917944, 0.0016661506379023194, 0.0011927011655643582, 0.0015189824625849724, 0.0019377877470105886, 0.001485675573348999, 0.0016966185066848993, 0.0013023465871810913, 0.0023092825431376696, 0.0017530230106785893, 0.0024273875169456005, 0.00080977630568668246, 0.0026748750824481249, 0.0019681940320879221, 0.0026011066511273384, 0.00097111193463206291, 0.0020423044916242361, 0.0009075141279026866, 0.001791907474398613, 0.0021454577799886465, 0.0019198892405256629, 0.0026159097906202078, 0.0015985418576747179, 0.0016084552044048905, 0.0018716107588261366, 0.0022554451134055853, 0.001684303511865437, 0.0025428906083106995, 0.0018475707620382309, 0.0030091353692114353, 0.0029490250162780285, 0.0017785854870453477, 0.0020985135342925787, 0.0018860404379665852, 0.0025706698652356863, 0.0015476637054234743, 0.0036460272967815399, 0.0027532884851098061, 0.0040211915038526058, 0.0025791020598262548, 0.0022089111153036356, 0.0014632937964051962, 0.0012837947579100728, 0.0021722970996052027, 0.0040604658424854279, 0.0024691014550626278, 0.0017537741223350167, 0.001779385725967586, 0.0012642164947465062, 0.0019920386839658022, 0.001010805950500071, 0.0022466226946562529, 0.0019519765628501773, 0.0011860199738293886, 0.0027857010718435049, 0.0016683113062754273, 0.00165391038171947, 0.0031275320798158646, 0.0022041471675038338, 0.001955950865522027, 0.0015627633547410369, 0.00276018469594419, 0.0023548146709799767, 0.0018200058257207274, 0.0022910141851752996, 0.0014155064709484577, 0.0017708842642605305, 0.0016742440639063716, 0.0020343756768852472, 0.0016233508940786123, 0.0014612477971240878, 0.0021193148568272591, 0.0022245678119361401, 0.00036305925459600985, 0.0027908154297620058, 0.0036578532308340073, 0.0036386733409017324, 0.0010301845613867044, 0.0015845933230593801, 0.0033134832046926022, 0.0019840691238641739, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -30606, 11542, -1438, -18433, 14327, -22237, 23379, -689, 2683, -12852, 12762, 9125, -8443, -24272, -6980, 18929, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.2374492699746042e-05, 5.4387299314839765e-05, 4.1514933400321752e-05, 6.1209255363792181e-05, 8.4804421931039542e-05, 0.00012349231110420078, 5.3780808229930699e-05, 6.7031964135821909e-05, 8.51965814945288e-05, 9.0720219304785132e-05, 8.5620922618545592e-05, 5.6839264289010316e-05, 8.3479390013962984e-05, 8.779889321886003e-05, 6.1365492001641542e-05, 5.476298974826932e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 27,37,4,59,-44,-64,-7,24,-15,-60,-12,-19,63,-80,78,17,-47,-26,45,26,99,14,-42,41,16,68,126,44,25,53,36,-18,29,15,24,-24,19,8,-12,12,127,14,23,-18,6,-22,15,-20,25,-29,84,10,-49,-13,55,0,-18,-62,29,20,9,64,-55,-9,31,26,67,12,20,-3,6,32,12,-2,17,35,82,-26,58,31,-1,23,14,29,-40,-21,-26,45,-3,23,-102,6,31,3,72,69, 
  /* [1][0][][] */ 12,21,-28,-53,5,-26,76,-64,-55,-73,-59,-33,8,-30,-29,-42,-37,-32,-4,-51,-17,-67,107,-73,-12,7,10,76,-48,27,-74,26,-1,-2,14,-2,-18,47,-38,51,-10,4,11,-61,23,-51,0,9,-93,39,59,-127,-77,59,58,60,15,11,-92,-30,-81,2,-42,2,0,-7,90,-4,-93,-105,0,-18,29,82,-5,47,-39,-31,77,-40,21,-22,16,-50,-21,-79,-1,14,-31,-65,55,-46,41,-20,-32,32, 
  /* [2][0][][] */ -1,-8,2,11,49,46,-21,40,-54,39,18,-44,17,-19,27,14,35,-7,-127,9,8,-3,-27,44,12,-7,-50,34,-14,-26,16,74,-24,-10,7,32,-20,34,-38,-11,62,5,-6,26,22,59,7,3,-79,-1,-7,17,7,44,25,-87,63,-10,35,33,-10,9,-3,37,37,28,-46,-7,1,13,-35,-21,28,34,33,46,-67,-15,-24,-52,49,32,35,-40,-6,-48,-13,-38,-13,-28,-21,64,12,9,106,-64, 
  /* [3][0][][] */ 25,-1,-48,-70,-34,-27,90,-5,38,127,-59,-26,-2,-45,-14,44,59,52,-37,40,-46,45,13,52,-7,50,44,-44,-55,-7,-20,66,13,8,27,19,21,-25,-9,64,20,-6,-20,22,51,-40,-8,50,26,-23,26,-2,123,22,0,0,-13,-3,-10,-17,10,44,71,-16,-3,13,82,-23,20,13,-39,-1,14,-66,-12,-50,21,-30,82,24,-1,-37,-24,-24,-48,1,46,66,-36,56,-61,28,19,-79,-28,14, 
  /* [4][0][][] */ -1,72,33,-2,-37,28,-58,-7,19,-46,8,-21,26,47,-33,47,-4,-14,-7,-68,19,-21,-60,5,-41,-30,-13,1,-55,127,-37,-4,12,-35,-7,-43,91,18,-27,-6,17,24,22,-38,-58,-3,66,-15,22,-2,-45,-13,-63,32,21,36,12,24,-33,17,-38,-81,-42,20,41,32,-56,-39,-23,16,-30,-90,7,55,59,55,-22,29,-40,14,21,61,16,-77,36,-39,-9,-48,-22,-59,-17,7,-12,17,28,-21, 
  /* [5][0][][] */ 0,3,44,9,-2,-30,-3,-6,33,39,-28,19,-9,-27,39,-16,5,8,-38,-11,8,5,-22,32,44,-33,37,-27,-13,20,21,77,-4,-54,30,26,-43,-41,-29,5,-26,5,-27,14,22,7,-50,40,-4,3,28,10,27,-83,17,-3,-30,-43,25,-18,29,21,30,22,-24,16,127,-17,21,-6,38,24,-16,19,28,22,1,-15,127,46,-24,-5,-29,27,45,64,-13,63,-4,-19,-26,27,16,-34,-36,19, 
  /* [6][0][][] */ 28,-66,84,21,1,111,-56,-103,-9,-47,-127,77,18,42,-45,96,-5,33,38,-53,-77,-34,-55,-56,2,-78,1,78,-99,44,11,-32,7,62,-16,-34,-8,-61,21,-40,-1,52,55,-47,-5,71,-98,6,67,-5,-87,-65,50,-29,-99,20,8,8,46,-20,-1,-54,44,-5,44,-69,-95,-36,-110,-18,-4,-59,-46,-96,26,-82,65,6,-85,-2,-3,95,49,-62,80,-32,-10,-15,-90,77,-54,89,39,-34,36,-89, 
  /* [7][0][][] */ -4,12,-73,65,10,2,19,-12,-82,-11,83,58,-2,-50,-7,-59,-22,-37,18,-33,-81,-40,-74,-76,31,50,-3,86,2,13,3,-11,-46,-127,-2,75,-22,7,-53,6,-12,-15,15,-67,0,65,38,43,3,3,-31,-9,14,-30,15,-50,-14,46,-55,-18,52,-20,-1,-33,54,-80,79,-26,-71,-51,61,14,-20,-31,-55,-16,24,-64,91,-60,-6,-29,-49,-11,56,37,-46,23,2,5,2,4,32,1,98,-17, 
  /* [8][0][][] */ 12,-23,-17,18,-24,-22,21,-8,5,9,29,40,17,28,-47,-2,85,5,-1,9,-14,-70,-41,19,-14,-57,64,-31,-33,51,33,-25,-12,14,4,35,-26,-9,23,-20,22,41,5,-21,30,-19,43,19,33,2,46,19,14,-15,-27,-3,-19,127,-72,12,6,-80,-48,-18,-56,-15,-4,22,20,32,35,-46,-25,-119,43,-83,-2,16,-69,14,-10,-9,1,67,66,-50,-56,43,-32,103,-7,0,-39,-7,0,-42, 
  /* [9][0][][] */ -32,-20,-24,17,-2,31,22,26,-52,-26,60,37,-33,26,20,-26,-9,55,-12,-25,14,32,0,15,-15,50,5,29,55,-1,28,14,-9,4,24,64,2,8,13,9,-13,-18,9,-17,22,23,-7,42,-50,13,-6,21,124,31,-13,-27,55,-45,36,14,-43,-4,55,12,5,50,72,-5,43,18,-46,32,23,-125,-27,-127,-9,-7,41,-18,8,21,-3,-58,47,18,-45,18,-27,88,27,48,55,27,-11,13, 
  /* [10][0][][] */ 6,27,30,1,2,13,-15,-19,33,9,-31,28,32,22,12,-58,-40,-9,28,-20,38,-29,-6,-33,17,-2,-76,53,-4,26,-23,-5,29,32,-17,-9,-1,0,-11,-4,21,-17,67,-56,-20,-21,8,4,15,-11,12,-37,-28,-3,11,4,-8,-4,-1,1,-19,-30,-12,8,-22,-30,-60,-31,-50,-12,30,5,-21,14,34,22,53,-23,-52,2,-25,16,-9,-16,13,-2,-47,-127,-33,20,-3,6,49,-28,11,17, 
  /* [11][0][][] */ 32,-27,32,14,-106,82,29,46,44,-23,-10,-81,51,0,46,22,-6,64,36,-41,23,33,38,14,62,15,73,-26,28,-57,-41,40,39,117,-104,-16,41,-22,86,29,-67,37,11,-24,-31,-37,-2,5,44,-20,-18,-40,0,35,-69,74,-44,-31,2,-21,15,13,-36,-57,1,-1,-126,-100,24,-13,-127,53,56,-2,1,-7,73,70,-98,-14,-21,8,-38,-37,-25,-17,81,72,-5,-45,20,35,-38,23,79,3, 
  /* [12][0][][] */ 42,32,-18,1,4,-36,22,22,29,-22,17,-20,22,-11,17,31,17,-30,-28,7,24,43,4,67,-28,-22,-126,-30,60,-24,24,-12,-25,-77,52,0,27,-24,4,33,-2,-63,22,22,52,-5,22,-11,-63,-1,-67,96,71,-22,33,-92,10,15,-18,-4,2,56,64,9,-11,4,35,42,127,11,22,48,2,-19,-19,-7,-13,-25,38,-27,14,-51,43,-20,-1,-8,-15,-104,0,35,-31,47,0,40,9,23, 
  /* [13][0][][] */ -21,30,-63,23,42,-3,16,-11,-1,81,-44,19,-48,-31,69,-33,-10,53,39,-19,-34,-51,-10,13,33,38,-16,41,11,50,67,-33,-28,46,-45,38,25,-50,-65,-36,-18,-28,44,-10,63,42,-84,23,-30,19,-16,7,-5,-47,69,14,32,-67,4,-2,18,7,5,-18,-7,76,116,39,49,-42,-49,8,29,48,-109,47,21,-48,127,-38,-38,-5,42,-18,6,55,-16,-11,-20,-24,29,62,51,14,60,43, 
  /* [14][0][][] */ -5,50,13,39,-84,-46,30,61,-47,-27,75,-23,-72,-19,94,9,-21,38,-70,45,-10,36,-96,29,-32,-16,-34,-127,11,25,34,93,-38,36,27,-10,-2,-51,-2,-24,33,-40,26,-14,11,33,-55,49,-30,-29,87,32,1,50,-30,36,-49,8,2,49,66,80,6,60,36,-12,-6,-52,61,76,47,17,-36,8,15,-9,41,5,14,29,-47,104,10,-99,62,-20,0,12,-99,-3,-8,15,-17,-2,39,24, 
  /* [15][0][][] */ 63,-66,39,7,72,18,-28,-5,-3,20,-50,-2,63,74,14,-4,-22,-20,-64,23,-28,-54,24,0,44,-28,73,55,55,-48,-62,28,48,29,-21,-91,24,47,71,31,67,18,2,-11,-54,-119,14,-58,-34,-28,-6,-22,-28,-38,-27,44,-7,11,-26,20,-26,-64,-46,47,12,10,-84,63,-27,-63,3,26,-37,-117,-65,-95,-7,28,-127,43,47,-30,61,41,-73,-19,17,-32,26,51,32,-68,-47,-45,24,-43, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0027871385682374239, 0.0024302392266690731, 0.0018550510285422206, 0.0027350711170583963, 0.0037893962580710649, 0.0055181235074996948, 0.0024031386710703373, 0.0029952526092529297, 0.0038069193251430988, 0.0040537375025451183, 0.0038258805871009827, 0.0025398025754839182, 0.0037301885895431042, 0.0039232010021805763, 0.002742052311077714, 0.0024470265489071608, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10669, -6088, -9228, 12497, -6730, -1824, 899, -356, 2089, -5801, 1229, -3995, 15780, -8156, -3795, -2596, 4384, 145, -15059, -5410, -434, 1804, -5069, 683, 223, 5283, -6455, -17924, -4619, -6330, -2272, -1123, 9803, -1101, -4803, -630, -6215, 7477, 12921, 13650, -4063, 5423, -2059, 18825, 5243, -4375, 11496, 8442, -3701, 735, -5114, -57, -393, -4266, 2376, 465, -967, 2759, -2406, -465, -4708, 176, -2929, 4949, 16495, -4803, 16396, 11427, -693, -439, 13732, 1487, -670, -2760, -2283, -859, 22345, 9334, 12527, 9923, 9851, -1266, 5486, 7268, 238, 1817, 11212, -2943, 9220, -424, -9031, 345, -2894, 2180, 13991, -262, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 8.238670852733776e-05, 0.00013712119834963232, 9.6417708846274763e-05, 8.5516818217001855e-05, 0.00013666116865351796, 0.0004846269148401916, 0.00011117860412923619, 0.00015119230374693871, 0.0002725473023019731, 0.00017411187582183629, 0.00026655243709683418, 0.00017139289411716163, 8.6522857600357383e-05, 8.5880936239846051e-05, 0.00018577878654468805, 0.00016875122673809528, 0.00022529673879034817, 0.00028446008218452334, 6.9510737375821918e-05, 0.0002667219378054142, 0.00023541874543298036, 0.00024570367531850934, 0.00013490459241438657, 0.00016604442498646677, 0.00082158384611830115, 0.00018392788479104638, 0.00026461694505997002, 6.4817439124453813e-05, 0.00027657859027385712, 0.00010726538312155753, 0.0001902674266602844, 0.00027958216378465295, 0.00010661577107384801, 0.00034328273613937199, 0.00010627556912368163, 0.00015701596566941589, 0.00014787941472604871, 8.6457686848007143e-05, 9.6806812507566065e-05, 7.8271470556501299e-05, 0.00042584427865222096, 0.00013774697436019778, 0.00016746124310884625, 6.1888225900474936e-05, 0.00015410316700581461, 0.0002487268066033721, 9.6328200015705079e-05, 0.00017717086302582175, 0.00016064995725173503, 0.00020529549510683864, 0.00021587623632512987, 0.00019450650142971426, 0.00015525310300290585, 0.00021909698261879385, 0.00019077162141911685, 0.00020408658019732684, 0.00015033413365017623, 0.00037694154889322817, 0.00026802351931110024, 0.00016667948511894792, 0.00017792453581932932, 0.00032744798227213323, 0.00014359060151036829, 0.00014178788114804775, 0.00011486565927043557, 0.00026159480330534279, 0.00012300672824494541, 0.00013278992264531553, 0.00023311917902901769, 0.00033532999805174768, 0.00011621938028838485, 0.00022355522378347814, 0.00038660515565425158, 0.00014085069415159523, 0.00016685026639606804, 0.0001921318907989189, 6.8931702116969973e-05, 9.9747980129905045e-05, 9.186824900098145e-05, 0.0001803695922717452, 7.3587252700235695e-05, 0.00025601850938983262, 0.00010273670341121033, 0.00029290118254721165, 7.4690571636892855e-05, 0.00024777668295428157, 0.00011038452066713944, 0.00030108069768175483, 0.00013351839152164757, 0.00021352709154598415, 0.00010590302554192021, 0.00020150269847363234, 0.00026838466874323785, 0.00014607222692575306, 0.00010914936137851328, 0.00022510957205668092, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -39,25,5,-32,127,6,-9,-27,-17,14,-29,0,-78,49,-13,-74,-31,4,51,6,-32,-9,-61,71,-4,15,-45,57,27,11,25,-12,20,7,-1,-11,22,-52,-101,-5,15,-75,53,-123,-66,61,-46,-36,-31,-29,-1,42,-66,28,-2,9,46,-16,43,16,9,-22,10,-14,-12,-7,-47,-26,-16,20,-5,-13,106,7,1,20,-123,-4,127,-48,-127,23,-117,7,-13,-33,1,-13,-18,-13,-6,-33,13,31,16,-4, -26,59,40,-36,-38,27,127,-74,-18,23,-22,12,-101,31,-71,78,-27,48,127,-31,-64,127,74,125,31,43,32,102,127,58,127,-14,-127,-7,-72,-1,7,-10,88,-100,-12,-127,-3,-72,67,-2,-43,-18,40,-19,12,127,-81,19,-117,18,-34,-12,22,38,-12,-127,-103,-22,-62,15,-8,-19,-26,15,-98,101,-98,0,23,-22,-83,-39,-1,-127,-118,17,22,-25,87,72,-28,19,-127,2,40,24,23,108,-27,-104, -64,27,-22,12,109,19,21,-41,-28,57,-22,27,25,30,8,-48,-36,13,33,-3,-40,1,-10,34,-9,18,4,38,22,22,5,-2,-3,11,-34,92,29,9,-78,-14,12,-67,47,-75,-19,-5,15,-41,-14,-24,-16,45,46,9,-18,11,99,-15,27,-2,2,-24,-22,30,7,-17,127,-24,-39,30,-27,8,46,0,-6,28,-127,-92,-46,-36,-70,0,-127,3,40,-58,4,-27,-3,-41,14,59,24,2,28,3, 
  /* [0][1][][] */ -77,21,11,-101,77,76,-48,-22,5,-84,-36,-37,-127,77,22,64,-33,39,111,56,33,-43,91,-25,33,-2,38,127,7,29,-7,-25,-40,-10,115,-41,13,-127,-100,-127,-2,32,84,-90,-118,127,-117,-105,55,18,28,-47,-91,127,74,-7,28,-34,26,6,35,4,122,-59,-61,23,-34,-53,-10,-9,-121,-11,127,119,-9,-51,-95,-1,-93,1,-43,-13,-14,-38,55,-3,-127,17,-63,127,88,-102,127,-4,-23,10, 127,127,47,66,-124,-127,122,-76,127,99,-60,-48,-53,127,-12,110,127,-127,66,127,127,-73,119,-127,-127,-127,127,127,-89,127,-8,127,-52,127,127,-121,127,66,16,-57,127,56,-127,-127,127,-2,127,99,127,-127,127,-93,99,84,-127,127,-127,127,-127,127,-66,111,113,-127,93,127,-27,127,-95,-127,-9,-127,30,127,127,59,56,-127,120,-48,-18,127,87,127,127,71,-106,127,-90,46,-18,-7,-69,-17,-127,-33, -100,-8,46,-65,44,74,-42,-11,-32,-21,-19,127,-122,38,27,48,-36,36,63,26,-3,-16,57,-32,19,6,15,63,12,27,14,-13,-54,-20,101,127,30,-114,-127,-36,-7,-19,48,-119,-78,-35,-112,-127,36,46,-2,-22,127,37,82,-20,77,-38,53,-35,18,-16,-127,-33,-90,5,-69,-70,-8,6,-77,-14,42,-78,-4,127,-118,-75,-66,-14,-108,-14,-104,-53,-16,25,-43,15,-33,-84,127,127,-26,-18,-15,-3, 
  /* [0][2][][] */ -42,-15,57,-48,56,-4,-44,14,-1,93,28,-53,-56,36,9,-127,-31,3,-10,-10,-4,-27,-37,-22,-22,-11,-30,77,21,1,14,17,23,-13,55,-34,10,-57,-93,-37,-17,-43,7,-23,-27,8,-86,-26,-80,15,1,-35,-4,7,45,0,19,-18,15,-11,18,22,8,-9,-81,-16,88,-37,48,23,3,-37,-8,-17,-19,-10,9,101,-51,24,16,-6,35,-51,-12,-17,2,-22,-3,1,2,-67,-6,-27,-66,-7, -25,-45,127,-127,-20,-5,3,127,-57,127,127,-3,-91,53,127,72,-32,-46,66,-44,-6,-3,127,-12,6,-17,18,87,3,-10,-47,-24,-31,-25,-89,-8,-69,-12,109,-72,-16,-32,-33,118,7,-26,-92,-31,42,-4,24,-11,37,26,-56,-27,-90,-32,71,-34,127,16,109,-17,-127,-34,-41,-67,127,28,-127,-17,-46,22,36,-25,-18,-79,-13,59,-15,-33,-33,-89,37,-127,-23,-8,-76,10,9,-13,9,-127,-86,127, -95,24,82,7,68,4,-10,28,-16,59,-2,26,-25,-8,27,-72,-29,15,-27,-11,-6,-10,-16,-47,-7,22,-18,67,-24,3,-35,12,38,1,-25,-5,16,-78,-104,17,-20,-5,4,-25,-24,-15,-107,15,-79,2,3,-20,0,9,31,-6,73,-3,30,-35,25,21,-19,10,-66,4,-45,-25,34,18,0,-32,-90,7,-20,-26,39,41,103,-39,58,-17,-50,-26,-24,-11,14,-33,13,-14,45,22,-4,-6,-2,-13, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0040581431239843369, 0.0067542139440774918, 0.0047492715530097485, 0.0042123235762119293, 0.0067315534688532352, 0.023871390148997307, 0.005476352758705616, 0.0074473177082836628, 0.013424932025372982, 0.0085762729868292809, 0.013129641301929951, 0.0084423432126641273, 0.0042618783190846443, 0.0042302589863538742, 0.0091509530320763588, 0.0083122216165065765, 0.0110974982380867, 0.014011722058057785, 0.0034239080268889666, 0.013137990608811378, 0.011596080847084522, 0.012102688662707806, 0.0066450294107198715, 0.00817889254540205, 0.040468964725732803, 0.0090597821399569511, 0.013034303672611713, 0.0031927288509905338, 0.013623501174151897, 0.0052835983224213123, 0.0093720508739352226, 0.013771450147032738, 0.0052515999414026737, 0.016909165307879448, 0.0052348426543176174, 0.0077341753058135509, 0.0072841336950659752, 0.0042586680501699448, 0.0047684377059340477, 0.0038554375059902668, 0.02097591944038868, 0.0067850374616682529, 0.0082486812025308609, 0.0030484441667795181, 0.0075906990095973015, 0.012251599691808224, 0.0047448626719415188, 0.0087269498035311699, 0.0079131759703159332, 0.010112292133271694, 0.010633470490574837, 0.0095808561891317368, 0.0076473415829241276, 0.010792115703225136, 0.0093968864530324936, 0.010052744299173355, 0.0074050463736057281, 0.018567105755209923, 0.013202101923525333, 0.0082101738080382347, 0.0087640741840004921, 0.016129188239574432, 0.0070728790014982224, 0.0069840815849602222, 0.0056579667143523693, 0.01288544200360775, 0.0060589737258851528, 0.0065408670343458652, 0.011482810601592064, 0.016517434269189835, 0.0057246475480496883, 0.011011715978384018, 0.019043108448386192, 0.0069379182532429695, 0.0082185855135321617, 0.0094638895243406296, 0.0033953862730413675, 0.0049133114516735077, 0.0045251776464283466, 0.0088845109567046165, 0.0036247058305889368, 0.012610768899321556, 0.0050605279393494129, 0.014427507296204567, 0.0036790524609386921, 0.012204798869788647, 0.0054372381418943405, 0.014830407686531544, 0.0065767494961619377, 0.010517758317291737, 0.0052164923399686813, 0.0099254697561264038, 0.013219891116023064, 0.0071951164864003658, 0.0053763976320624352, 0.011088279075920582, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 765, 7461, -42, 1040, 8237, 20859, -930, 4585, 16245, -2675, 7136, 3673, 2683, 525, 7201, 1219, 3765, 12028, -58, 11931, 698, 7830, -1420, 3362, -8078, 1875, 3923, 1723, 7787, 2764, 3390, 6855, 1783, 12840, 2640, 5230, 4554, 2903, 7778, 6085, 14555, 4328, 3245, 1540, 6724, 15219, 5516, 9020, 1964, -927, 4210, 6386, 3406, -4969, 9492, -382, 2734, 11947, 1249, 1374, 2353, 17908, 7292, -450, 23542, 6655, 2726, 5751, 9106, 7409, 3571, 2538, -9084, 5011, 1829, 6663, 670, 8510, 5008, 17532, 2928, 1581, 5758, 21232, 226, 7276, 6489, 1851, -1579, 3852, 2825, 16482, 3979, 4138, 3680, 7459, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0002690448600333184, 8.8562010205350816e-05, 0.00015924719627946615, 0.00024956060224212706, 8.112767682177946e-05, 4.4227519538253546e-05, 0.00014956278027966619, 7.9600307799410075e-05, 5.8261524827685207e-05, 0.00010644395661074668, 0.00011841146624647081, 0.00010091478179674596, 0.00013448386744130403, 0.00028834282420575619, 7.9941826697904617e-05, 0.0001193185817101039, 0.00016649931785650551, 6.3479172240477055e-05, 0.00015145137149374932, 6.9486297434195876e-05, 0.00017363170627504587, 9.5028779469430447e-05, 0.0001850861735874787, 0.00010532678425079212, 9.1592199169099331e-05, 0.00012112003605579957, 0.00014164370077196509, 0.0001244174491148442, 0.00011327399261062965, 0.00011283088679192588, 0.0001560184609843418, 9.1015266661997885e-05, 0.00018371990881860256, 6.5619671659078449e-05, 0.00015883374726399779, 0.00011908928718185052, 0.00011591954535106197, 0.0001171132898889482, 7.3823408456519246e-05, 8.3406142948661e-05, 5.9094320022268221e-05, 9.9066201073583215e-05, 0.00011146977340104058, 0.00010574402404017746, 6.6404223616700619e-05, 6.2185856222640723e-05, 0.00012257718481123447, 8.9558154286351055e-05, 0.00017340570047963411, 0.00021987382206134498, 0.00012762704864144325, 0.00010115549230249599, 0.00013597770885098726, 0.00011392750457162037, 8.2835242210421711e-05, 0.00022909473045729101, 0.00012157615856267512, 6.8672896304633468e-05, 0.00014962503337301314, 0.00014822401863057166, 0.00012238566705491394, 5.6195927754743025e-05, 0.00010647770250216126, 0.00021223790827207267, 3.7202389648882672e-05, 0.00011283625644864514, 0.0001481621729908511, 0.00010417695739306509, 7.7143318776506931e-05, 7.4883122579194605e-05, 0.00012711310409940779, 0.00010048729018308222, 7.2230133810080588e-05, 0.00012122575571993366, 0.00017501752881798893, 0.0001042927906382829, 0.00019597723439801484, 8.3544109656941146e-05, 0.00012125276407459751, 5.903973215026781e-05, 0.00012864396558143198, 9.7426665888633579e-05, 7.0977643190417439e-05, 4.470946078072302e-05, 0.00010364162153564394, 0.00010030450357589871, 0.00010622955596772954, 0.00017548906907904893, 0.00012540812895167619, 0.0001681321591604501, 9.432745719095692e-05, 5.4377480410039425e-05, 0.00012500824232120067, 0.00011058817472076043, 0.00014872063184157014, 8.4749808593187481e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 78,5,-7,73,-127,-50,73,56,98,106,-9,45,18,6,4,58, 
  /* [1][0][][] */ -32,15,-64,28,127,67,-13,0,-42,11,-50,33,-43,86,-52,-31, 
  /* [2][0][][] */ -65,68,88,-26,65,127,33,45,26,-19,62,-9,76,-126,5,45, 
  /* [3][0][][] */ 127,0,21,19,-5,-9,-14,7,48,19,-29,-24,-52,44,-32,33, 
  /* [4][0][][] */ -76,-20,-32,12,-127,-10,-66,3,14,2,8,-91,-84,5,-38,104, 
  /* [5][0][][] */ -105,-12,27,18,127,11,19,9,-81,10,-26,3,-51,67,-85,-5, 
  /* [6][0][][] */ -127,37,-42,39,-22,-67,78,19,23,-37,-25,55,-33,16,-39,30, 
  /* [7][0][][] */ -14,64,63,-127,90,69,96,51,11,31,20,91,113,54,-62,-29, 
  /* [8][0][][] */ -2,-18,-47,73,-56,25,-78,-64,52,-7,67,44,60,31,-127,-25, 
  /* [9][0][][] */ -18,-127,20,104,-51,-80,13,31,31,27,-7,35,-115,43,-16,-35, 
  /* [10][0][][] */ 3,-22,-31,61,-57,60,19,-40,8,-38,54,-7,12,127,-35,44, 
  /* [11][0][][] */ -22,-102,-50,37,-17,62,53,11,-26,18,69,-121,-35,85,-111,127, 
  /* [12][0][][] */ 25,-78,-127,80,-101,-118,36,35,115,51,-25,119,21,-86,-72,-17, 
  /* [13][0][][] */ -61,-27,-18,-2,-8,-12,33,8,-40,127,-31,-33,43,12,17,-4, 
  /* [14][0][][] */ -83,-32,-13,-84,-11,127,-25,-63,81,-34,92,39,64,-63,-20,-62, 
  /* [15][0][][] */ 0,-127,85,-35,-71,-47,-3,67,-7,-75,-57,-45,55,-21,-30,-30, 
  /* [16][0][][] */ -22,-39,15,-43,41,31,-5,-41,66,-127,21,-25,6,6,-68,-57, 
  /* [17][0][][] */ 13,21,-24,-54,71,-1,-31,8,125,-48,-29,50,127,-49,-23,-116, 
  /* [18][0][][] */ 46,-23,-18,-127,-2,-9,98,-20,32,44,26,53,-8,21,-12,-105, 
  /* [19][0][][] */ 18,18,-29,-94,-87,36,3,-32,40,-23,13,-127,3,-79,-26,-28, 
  /* [20][0][][] */ -16,40,34,-75,51,-59,-62,59,-101,-127,42,-80,-45,119,-17,-5, 
  /* [21][0][][] */ 10,-105,-85,-1,103,43,-2,45,-105,-4,-48,30,127,-42,-20,22, 
  /* [22][0][][] */ 63,22,100,-25,17,-4,89,12,13,127,-10,-1,31,-18,126,-1, 
  /* [23][0][][] */ -59,-62,15,58,34,34,22,-21,-50,3,6,-38,-10,24,66,127, 
  /* [24][0][][] */ -6,-30,41,23,-20,-97,21,-92,-18,127,-103,81,-4,-94,105,-42, 
  /* [25][0][][] */ 89,-60,127,91,45,5,-25,29,-109,96,24,-54,-5,23,91,-15, 
  /* [26][0][][] */ -21,18,13,34,-67,127,-2,58,-50,-47,-69,44,7,44,54,-120, 
  /* [27][0][][] */ 27,-22,-17,-16,-33,-16,-75,14,-110,-22,-79,-61,-83,43,3,127, 
  /* [28][0][][] */ -57,-33,41,24,34,-28,-127,2,-31,-30,-15,4,29,-26,-54,-21, 
  /* [29][0][][] */ -39,-109,12,90,-1,15,127,-2,39,53,-125,71,54,17,-45,72, 
  /* [30][0][][] */ 24,-44,-76,-37,-127,-13,29,-14,20,14,5,-30,-52,34,1,78, 
  /* [31][0][][] */ -127,-30,-1,60,-40,-15,-42,20,-42,-51,12,-16,-25,-31,-3,86, 
  /* [32][0][][] */ -96,-54,-91,10,-112,-31,1,-7,127,9,-18,-46,34,40,5,-16, 
  /* [33][0][][] */ -13,0,-74,31,-104,-80,53,-28,-127,22,-61,-57,-2,59,64,57, 
  /* [34][0][][] */ 41,35,1,31,-76,-74,26,22,28,-127,-3,44,-45,-2,26,56, 
  /* [35][0][][] */ 109,85,-112,23,-127,48,127,-60,56,79,-39,39,-28,92,89,54, 
  /* [36][0][][] */ 11,13,-19,35,127,-27,20,23,-54,36,-92,-47,-6,-13,-12,8, 
  /* [37][0][][] */ -62,29,-12,-54,18,-60,-51,-27,32,-30,8,71,75,-64,2,-127, 
  /* [38][0][][] */ 54,51,54,-76,-83,-69,-127,-62,-13,-63,43,95,-87,-86,123,-41, 
  /* [39][0][][] */ -19,-65,-15,51,9,91,127,6,-18,22,40,-30,5,117,28,122, 
  /* [40][0][][] */ 84,56,52,71,-98,-46,25,-9,-111,15,4,-44,-31,-49,127,-6, 
  /* [41][0][][] */ -48,-24,-3,63,-103,127,-12,89,-68,25,-96,41,2,43,114,-125, 
  /* [42][0][][] */ 22,-99,22,-8,104,54,56,-5,-67,-127,-46,11,27,17,-2,44, 
  /* [43][0][][] */ -34,-80,-39,26,127,-25,1,73,-112,-56,-82,-36,53,30,-63,18, 
  /* [44][0][][] */ -74,-51,-81,-58,39,56,52,88,-84,-127,-81,13,-103,44,28,125, 
  /* [45][0][][] */ 25,-24,-33,-43,-127,81,-37,-88,81,-7,17,3,25,32,-63,-4, 
  /* [46][0][][] */ 42,-92,-4,-15,71,-108,-18,104,24,-53,33,59,-22,-55,97,-127, 
  /* [47][0][][] */ -80,-32,29,81,2,10,36,32,-24,127,62,86,0,125,-21,64, 
  /* [48][0][][] */ 47,-7,-63,-88,24,-63,0,48,40,-62,-1,30,-57,32,-57,-127, 
  /* [49][0][][] */ 56,29,5,35,-11,-17,22,30,-15,127,-13,35,-37,-22,50,108, 
  /* [50][0][][] */ -10,-5,12,-2,-127,-15,-6,-33,33,5,20,37,-14,-60,31,23, 
  /* [51][0][][] */ 50,33,-33,-86,-43,127,23,-67,13,-2,65,-20,34,31,7,36, 
  /* [52][0][][] */ 39,26,3,-104,86,-110,0,-40,26,23,127,-42,-16,27,7,107, 
  /* [53][0][][] */ -15,-41,-4,-7,-40,-127,-14,-82,-26,76,-74,72,-27,-24,39,-49, 
  /* [54][0][][] */ 31,41,43,-34,-127,-55,-64,-61,-26,25,1,33,-64,-55,55,29, 
  /* [55][0][][] */ 35,18,-20,91,-61,0,18,0,9,127,25,78,-33,4,22,40, 
  /* [56][0][][] */ 35,-91,-63,87,-52,14,27,38,35,-38,12,-6,4,-46,36,127, 
  /* [57][0][][] */ 30,-7,66,-65,55,-33,-43,-20,63,-65,19,112,69,-59,127,-41, 
  /* [58][0][][] */ 80,-58,-46,-99,-1,-1,-38,127,89,70,50,38,-6,-2,109,1, 
  /* [59][0][][] */ -21,33,-14,-47,-1,-81,-48,6,26,46,-77,-62,-127,-104,100,-21, 
  /* [60][0][][] */ 15,-107,14,44,24,15,3,-46,90,99,41,127,10,-10,-52,-64, 
  /* [61][0][][] */ 33,16,12,-31,-77,-127,-26,-47,-63,-15,-16,0,-82,-56,37,37, 
  /* [62][0][][] */ -25,63,-23,42,-49,127,-56,19,-56,13,-72,29,-59,41,76,-96, 
  /* [63][0][][] */ 65,-3,-49,-127,6,-34,69,-10,5,-65,-58,57,-12,65,41,-63, 
  /* [64][0][][] */ -62,71,-43,-51,30,7,56,80,-127,-17,-45,-77,-75,81,34,84, 
  /* [65][0][][] */ -67,5,-37,-23,42,23,-45,-47,-62,-41,10,-13,-127,87,-12,30, 
  /* [66][0][][] */ -7,62,10,64,-19,127,-15,6,-54,24,-56,71,-26,52,62,-101, 
  /* [67][0][][] */ 46,12,-14,4,13,-62,53,-79,-5,4,12,127,-16,8,-1,-97, 
  /* [68][0][][] */ -30,-98,-43,65,-8,-22,43,127,24,35,39,-27,-119,42,-23,0, 
  /* [69][0][][] */ 21,105,55,-87,71,26,-22,51,35,85,13,45,48,-109,40,-127, 
  /* [70][0][][] */ 43,38,80,-9,104,-33,-83,-61,-119,-127,-3,50,-39,81,-87,-23, 
  /* [71][0][][] */ 5,-79,21,-13,90,-12,5,-8,-85,116,-127,2,22,75,-23,50, 
  /* [72][0][][] */ 19,52,36,-37,-13,-3,-74,-127,-17,67,-34,78,72,59,-75,-7, 
  /* [73][0][][] */ -41,-23,-56,-27,12,-67,15,-1,49,45,115,-13,-11,-7,-62,127, 
  /* [74][0][][] */ -30,15,-16,87,-82,35,127,58,23,35,35,115,117,57,-50,47, 
  /* [75][0][][] */ -49,47,5,75,-46,127,-44,12,-58,50,-41,86,3,81,36,-119, 
  /* [76][0][][] */ -62,75,-37,41,-88,-25,-5,8,57,44,-34,-54,22,-60,-127,40, 
  /* [77][0][][] */ 90,127,-94,120,44,69,53,34,48,-3,120,0,51,49,62,16, 
  /* [78][0][][] */ 16,-35,12,-44,82,-127,26,-35,19,50,119,-8,-9,-20,-53,121, 
  /* [79][0][][] */ -66,46,-21,13,2,-28,-30,4,-127,-10,59,-3,89,26,-119,-51, 
  /* [80][0][][] */ -114,68,122,0,74,93,41,-127,-102,44,-45,-32,-33,-34,50,57, 
  /* [81][0][][] */ 67,61,-34,24,23,-12,68,109,-127,92,-47,-32,-35,47,77,125, 
  /* [82][0][][] */ 95,96,-62,-76,-39,-41,41,-92,111,26,-21,121,84,-24,127,-99, 
  /* [83][0][][] */ 15,5,60,44,24,2,-3,-88,26,-29,61,24,41,-30,-55,-127, 
  /* [84][0][][] */ -127,-54,-60,-33,14,125,104,18,74,95,111,113,54,96,-126,-6, 
  /* [85][0][][] */ 101,-11,119,-66,76,-34,8,78,0,127,-14,45,1,101,85,-8, 
  /* [86][0][][] */ -78,79,-61,39,15,83,22,16,63,7,127,-36,-26,53,24,2, 
  /* [87][0][][] */ 17,-54,27,-41,41,-127,39,-38,61,-25,87,-30,45,-30,-38,74, 
  /* [88][0][][] */ -63,89,34,1,72,-23,76,-20,-91,-106,126,-99,77,127,95,-100, 
  /* [89][0][][] */ -27,20,9,15,-19,127,-19,18,-32,6,-40,20,-3,49,31,-73, 
  /* [90][0][][] */ 19,-42,63,-26,124,7,63,40,-32,-50,-127,-69,-4,-14,-33,68, 
  /* [91][0][][] */ 18,68,-21,17,8,-127,-88,6,-71,-9,-99,-85,-57,-29,66,69, 
  /* [92][0][][] */ 42,57,25,-8,-127,-82,57,2,-22,25,-28,-65,-44,-86,37,23, 
  /* [93][0][][] */ -22,-97,-127,89,-23,-67,-57,91,91,83,6,66,-56,90,-2,13, 
  /* [94][0][][] */ 127,29,85,-35,20,-44,12,32,52,77,-17,25,10,-25,127,11, 
  /* [95][0][][] */ -127,-70,-23,-45,64,-19,58,79,-46,-16,-30,-73,-17,-14,-97,35, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0062898499891161919, 0.0020704420749098063, 0.0037229517474770546, 0.0058343387208878994, 0.0018966388888657093, 0.00103397062048316, 0.0034965451341122389, 0.0018609313992783427, 0.0013620638055726886, 0.0024884941522032022, 0.0027682757936418056, 0.0023592305369675159, 0.0031440234743058681, 0.0067410063929855824, 0.0018689155112951994, 0.0027894827071577311, 0.0038924948312342167, 0.0014840442454442382, 0.0035406972747296095, 0.0016244815196841955, 0.0040592392906546593, 0.0022216250654309988, 0.0043270266614854336, 0.0024623763747513294, 0.0021412831265479326, 0.0028315980453044176, 0.0033114093821495771, 0.0029086864087730646, 0.0026481696404516697, 0.0026378105394542217, 0.003647468751296401, 0.002127795247361064, 0.0042950855568051338, 0.0015340858371928334, 0.0037132860161364079, 0.002784122247248888, 0.00271001853980124, 0.0027379265520721674, 0.0017258763546124101, 0.0019499058835208416, 0.001381533220410347, 0.0023160136770457029, 0.002605989808216691, 0.0024721308145672083, 0.0015524274203926325, 0.0014538085088133812, 0.0028656637296080589, 0.0020937302615493536, 0.0040539554320275784, 0.0051403078250586987, 0.0029837216716259718, 0.00236485805362463, 0.003178947139531374, 0.002663447754457593, 0.0019365590997040272, 0.0053558782674372196, 0.0028422614559531212, 0.001605465542525053, 0.0034980003256350756, 0.0034652468748390675, 0.002861186396330595, 0.0013137733330950141, 0.0024892829824239016, 0.0049617919139564037, 0.00086973397992551327, 0.0026379360351711512, 0.0034638012293726206, 0.0024354951456189156, 0.0018034906825050712, 0.0017506508156657219, 0.0029717066790908575, 0.0023492365144193172, 0.0016886282246559858, 0.0028340695425868034, 0.0040916376747190952, 0.0024382031988352537, 0.0045816428028047085, 0.0019531312864273787, 0.0028347009792923927, 0.0013802570756524801, 0.0030074957758188248, 0.0022776839323341846, 0.0016593468608334661, 0.0010452376445755363, 0.0024229798000305891, 0.0023449631407856941, 0.0024834817741066217, 0.0041026612743735313, 0.002931846771389246, 0.0039306683465838432, 0.0022052291315048933, 0.0012712609022855759, 0.0029224981553852558, 0.0025853794068098068, 0.0034768569748848677, 0.0019813186954706907, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -9605, 13189, -23161, -1064, 10663, -15755, -38588, -3437, -8956, 8716, -16322, -15574, 5016, -5173, -6986, 4404, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00010209590982412919, 0.00013693002983927727, 0.00014513100904878229, 0.00014384066162165254, 9.2835849500261247e-05, 0.00014473541523329914, 8.8961540313903242e-05, 0.00011415125482017174, 9.9047800176776946e-05, 9.8296412033960223e-05, 0.00019710786000359803, 0.00015147456724662334, 9.7845069831237197e-05, 7.4846873758360744e-05, 0.00016516326286364347, 0.0001129046140704304, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,49,17,-31,48,69,-49,43,-19,126,0,42,-29,31,-8,41,34,93,53,-64,-75,105,4,49,79,53,47,41,-68,-69,-9,77,-13,-6,-76,47,71,-127,-32,8,21,-16,100,-1,4,-49,-49,-13, 
  /* [1][0][][] */ -49,1,-74,-59,-3,109,-67,18,-7,-37,-59,21,81,-22,-21,-33,-36,-40,-35,11,-72,64,-125,-31,-54,-51,48,65,-43,-11,41,-45,28,-58,-25,63,27,-64,127,-42,-10,46,-36,1,13,62,19,18, 
  /* [2][0][][] */ -12,34,66,-18,-17,-121,15,23,103,91,-60,37,121,-58,127,86,-44,-23,-26,25,118,-101,-36,-106,14,-41,69,-83,48,45,-25,34,52,-35,67,28,-90,4,18,-27,-7,54,57,-36,25,-98,124,-63, 
  /* [3][0][][] */ 39,13,-31,-25,36,120,12,-8,45,-45,30,-8,-60,12,12,43,-24,-70,46,-111,4,-16,-21,-40,-37,82,127,56,-1,-56,32,43,52,-47,83,41,-55,-41,21,16,37,-2,-21,-15,44,13,6,-29, 
  /* [4][0][][] */ 102,-9,2,-44,98,96,51,1,63,-24,-109,17,55,-9,38,-6,-93,-109,-49,-116,-21,9,-35,-47,-92,120,-88,127,-51,-61,22,118,41,-35,27,-25,-15,19,-19,21,-41,-3,-16,56,-59,117,16,-52, 
  /* [5][0][][] */ -8,-13,-55,0,-37,37,28,-40,61,68,29,81,58,-19,39,2,-66,127,-4,23,40,5,-68,-6,36,13,-79,-50,-12,31,7,-17,-52,-12,51,17,-42,2,-95,5,93,-14,42,70,-1,23,-51,26, 
  /* [6][0][][] */ 49,8,9,43,1,-8,93,-42,1,82,109,93,46,55,-33,45,23,-37,-37,72,44,-85,-51,57,-100,97,62,-17,121,64,-20,21,63,-74,-101,-3,82,47,6,2,20,74,71,-9,70,127,39,-15, 
  /* [7][0][][] */ -82,-20,-25,13,-46,-64,38,50,72,127,-41,-79,-121,22,-31,-9,-83,88,11,118,-26,20,4,59,-47,-107,-30,-75,28,41,6,-3,-43,24,26,-36,-5,-71,114,3,-9,38,8,-10,62,72,-41,-22, 
  /* [8][0][][] */ -35,-93,31,-47,67,-52,73,-46,-13,-116,48,7,-37,5,23,35,4,30,-40,114,-14,32,-20,-10,68,6,-56,-31,-115,-47,-51,-116,-7,-71,-18,82,-24,41,127,14,10,5,84,121,4,-76,-27,92, 
  /* [9][0][][] */ 23,-30,42,-69,36,87,-46,64,10,-32,-46,-3,20,-47,91,-19,11,-123,40,44,-67,36,42,-26,-14,-77,-19,82,82,95,-47,-20,-41,35,-3,127,-22,-53,-52,-6,-26,-13,20,93,33,69,-59,19, 
  /* [10][0][][] */ -13,29,-38,5,0,22,-82,-44,41,56,67,-9,-32,-20,37,-49,-75,127,2,60,19,-6,18,21,-44,48,12,85,39,6,-43,-29,73,9,-18,29,4,-65,-44,2,-93,-9,46,-15,27,54,37,33, 
  /* [11][0][][] */ -26,50,-2,53,14,43,2,-2,18,19,-127,-69,73,35,-7,-33,-6,28,-56,-50,2,-5,103,-5,59,15,-7,19,-7,20,-8,48,44,7,-39,-12,40,72,97,5,35,-17,52,-12,-47,-16,85,10, 
  /* [12][0][][] */ -61,-8,30,17,-70,-50,0,-13,-21,-33,-127,10,80,-80,32,38,27,95,66,-105,-41,53,-30,-90,10,-6,22,-40,15,11,-29,53,56,57,26,-25,-33,-22,21,-4,-20,-1,66,7,37,-10,-28,-35, 
  /* [13][0][][] */ -31,-112,-39,-127,24,26,46,23,-113,28,107,-74,39,56,126,21,87,-7,-6,-93,95,-78,108,23,-77,-16,-25,28,-25,-104,-104,19,25,-41,-63,51,32,-61,75,-91,-14,28,55,44,64,-17,96,-82, 
  /* [14][0][][] */ 74,22,-45,31,-42,25,-62,-10,-25,33,53,55,-7,-66,10,-31,67,-79,39,-8,70,-50,11,-4,4,100,-66,-2,-54,-17,-65,8,127,43,97,-30,-65,20,-6,51,-3,-37,78,-39,-37,-45,-62,45, 
  /* [15][0][][] */ -52,2,39,7,94,4,-9,40,3,104,-15,75,53,-27,-49,-18,2,22,15,-18,17,-53,-75,-44,48,-78,-57,70,-17,33,15,-7,-91,1,127,0,-81,9,46,-19,-63,-37,15,-11,-51,-41,-20,-20, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0043390761129558086, 0.0058195260353386402, 0.0061680679209530354, 0.0061132279224693775, 0.0039455234073102474, 0.0061512547545135021, 0.0037808653432875872, 0.0048514283262193203, 0.0042095314711332321, 0.004177597351372242, 0.0083770835772156715, 0.0064376690424978733, 0.0041584153659641743, 0.0031809920910745859, 0.0070194387808442116, 0.004798445850610733, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13538, 33, 17670, -228, 14807, -2485, 34888, 768, 6596, 34625, 3800, 19996, 1437, 13142, 43644, 29990, 488, -2452, 7010, 34316, 27, 12766, 2760, 18256, 17407, 48746, 1878, -3746, -603, 19723, 17968, -1195, 1225, -460, 1611, 16706, 10258, 30520, 5362, 18161, 29000, 2373, -35, 14057, 1207, -1247, 24549, 23666, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.3543167167808861e-05, 8.493840869050473e-05, 7.2482245741412044e-05, 0.00018136388098355383, 0.00010262928117299452, 0.0001439445186406374, 6.4400272094644606e-05, 0.00015594394062645733, 0.00011312287824694067, 5.8761852415045723e-05, 5.9156533097848296e-05, 8.268684905488044e-05, 6.2373750552069396e-05, 0.00010272146028000861, 3.5794637369690463e-05, 5.966565731796436e-05, 0.00016100949142128229, 4.6431017835857347e-05, 0.0001395650178892538, 6.9184708991087973e-05, 0.00010279166599502787, 0.00011556060053408146, 0.00011948651808779687, 9.594513539923355e-05, 6.4312320319004357e-05, 4.617741797119379e-05, 5.7431490859016776e-05, 3.8319572922773659e-05, 0.00023562446585856378, 8.2551552623044699e-05, 6.1888255004305393e-05, 0.00019507290562614799, 0.00014642787573393434, 0.00017872216994874179, 7.3560462624300271e-05, 8.6661493696738034e-05, 9.5055416750255972e-05, 5.6998414947884157e-05, 6.2531711591873318e-05, 0.00011593831004574895, 4.8424182750750333e-05, 0.00015762116527184844, 0.0001836183073464781, 7.3492716182954609e-05, 0.00012117885489715263, 6.772032065782696e-05, 8.3767292380798608e-05, 6.1289269069675356e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -123,83,-127,35,-108,63,-48,12,-53,-44,127,-64,73,-115,-34,-58,77,122,89,-88,100,-127,68,-106,-72,-41,64,123,-94,-111,-48,52,30,-58,76,-67,-74,-109,93,1,15,-100,73,-118,127,40,-66,-107, -127,127,-93,44,-120,127,-37,-19,-102,-82,118,-76,58,-127,-37,-43,96,119,127,-127,127,-91,66,-127,-105,-61,105,96,20,-65,-75,76,61,-127,82,-121,-89,-116,110,-27,-87,102,92,-81,-55,77,-53,-126, -30,63,-43,-7,-7,91,-7,24,-27,-34,64,-12,36,-50,1,-18,42,104,57,-70,23,-68,5,-20,-70,-30,31,45,108,-51,-1,47,50,-77,46,-10,-69,-34,36,-50,-127,-59,12,-47,-79,55,3,-127, 
  /* [0][1][][] */ -60,87,-78,127,-64,64,-127,68,-90,-61,82,-88,113,-87,-89,-109,60,74,-60,-31,72,-44,93,-82,-89,-124,88,120,-127,-127,-89,127,65,40,80,-119,-90,-114,127,-80,-96,-105,127,-127,110,66,-58,1, -110,100,-79,93,-127,73,-99,127,-127,-127,114,-127,73,-97,-127,-91,127,127,-74,-38,75,-41,127,-42,-91,-127,127,127,16,-38,-127,114,127,22,127,-115,-127,-127,92,-127,-106,127,118,-66,-87,127,-127,4, -52,45,-62,12,-13,34,-16,112,-39,-46,55,-51,76,-59,-75,-38,82,89,-44,-32,8,-20,30,-84,-127,-83,59,40,92,-63,-40,117,58,4,53,3,-43,-9,69,-106,-86,-86,-1,-25,-95,64,-11,-47, 
  /* [0][2][][] */ -68,53,-5,54,-14,30,-123,78,-15,-47,26,-37,127,-32,-25,-127,21,88,-86,-15,12,2,29,-57,-11,-40,59,9,-83,-117,-61,41,32,62,69,-64,-57,-23,62,-1,-87,-34,47,-73,103,38,-36,-58, -69,74,-82,102,-86,9,-126,28,-31,-82,25,-41,80,-116,-70,-74,60,76,-91,6,28,43,14,-99,-90,-68,45,50,10,-102,-83,36,58,72,47,-127,-35,-11,54,-81,-66,94,14,-96,-23,59,-58,-30, -3,8,-67,21,-51,-23,-51,46,8,-17,-10,-3,47,-79,-4,-31,34,58,-82,-27,-17,-20,11,-27,-68,-99,34,56,49,-111,-30,74,23,45,42,-32,-37,4,73,-68,-17,-40,0,-56,-77,47,-25,-117, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0039755846373736858, 0.0036098824348300695, 0.0030804954003542662, 0.0077079650945961475, 0.0043617445044219494, 0.0061176419258117676, 0.0027370115276426077, 0.0066276174038648605, 0.0048077222891151905, 0.0024973787367343903, 0.002514152554795146, 0.003514191135764122, 0.0026508842129260302, 0.0043656621128320694, 0.0015212720027193427, 0.0025357904378324747, 0.0068429033271968365, 0.0019733181688934565, 0.0059315129183232784, 0.0029403502121567726, 0.0043686456046998501, 0.0049113254062831402, 0.0050781769677996635, 0.0040776683017611504, 0.0027332736644893885, 0.0019625402055680752, 0.0024408383760601282, 0.001628581783734262, 0.01001403946429491, 0.0035084409173578024, 0.0026302507612854242, 0.0082905981689691544, 0.006223184522241354, 0.0075956922955811024, 0.0031263194978237152, 0.0036831132601946592, 0.0040398552082479, 0.0024224326480180025, 0.0026575976517051458, 0.0049273781478404999, 0.0020580277778208256, 0.0066988994367420673, 0.007803778164088726, 0.0031234403140842915, 0.0051501011475920677, 0.0028781136497855186, 0.0035601097624748945, 0.0026047939900308847, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 3039, -1398, 1078, -2780, 5835, -989, 6982, -2695, 944, 142, 993, 3052, 330, -666, 1243, 6176, -2916, 5367, 5553, 936, -754, 3446, -1342, 8085, 1634, 2832, 1620, -1011, 5523, -348, 2299, -1934, -1496, 5300, -599, 4594, 2451, 885, 211, 6345, 1717, 6975, -3390, 1400, 6120, 574, 2249, 3210, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017189193749800324, 0.00022465344227384776, 0.00024349540763068944, 0.0001666493626544252, 0.00014414670295082033, 0.00017589426715858281, 0.00011955814261455089, 0.00019355739641468972, 0.00027276642504148185, 0.00025079038459807634, 0.0002214791311416775, 0.00021485349861904979, 0.00022002984769642353, 0.00025955174351111054, 0.00018256834300700575, 0.00013232388300821185, 0.00018491454829927534, 0.00016790357767604291, 0.0001530216250102967, 0.00027568830410018563, 0.00021546849166043103, 0.00016240673721767962, 0.00018411605560686439, 0.00010788868530653417, 0.00019574600446503609, 0.00016468412650283426, 0.00019769826030824333, 0.00022449878451880068, 0.00014084813301451504, 0.00022178931976668537, 0.00018858279509004205, 0.00014141856809146702, 0.00013027162640355527, 0.00014729540271218866, 0.00020829707500524819, 0.00013222523557487875, 0.00017254045815207064, 0.00025428066146560013, 0.00017972329806070775, 0.00013825422502122819, 0.00025327038019895554, 0.00010374655539635569, 0.00012879954010713845, 0.00025415958953090012, 0.00013388055958785117, 0.00020113697974011302, 0.00021400525292847306, 0.00015399033145513386, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 67,24,127,-41,61,98,-78,-55, 
  /* [1][0][][] */ 21,-72,-127,15,42,8,27,-5, 
  /* [2][0][][] */ -127,-17,-32,-32,42,17,-69,-33, 
  /* [3][0][][] */ 5,51,127,-57,-13,-96,1,-18, 
  /* [4][0][][] */ -127,23,-54,-15,39,30,-35,-56, 
  /* [5][0][][] */ -88,12,-46,-23,-5,44,-83,-127, 
  /* [6][0][][] */ -41,-127,-106,31,93,-7,11,24, 
  /* [7][0][][] */ -70,-127,-76,-49,-42,-58,20,70, 
  /* [8][0][][] */ 79,25,-2,2,85,-75,-127,15, 
  /* [9][0][][] */ -13,50,-50,91,-77,-36,127,-42, 
  /* [10][0][][] */ -38,105,53,51,127,-36,-6,71, 
  /* [11][0][][] */ -81,-15,-13,-4,-63,89,127,15, 
  /* [12][0][][] */ 83,30,-127,35,-13,-29,-75,-9, 
  /* [13][0][][] */ 70,-27,-52,10,8,-127,-26,-36, 
  /* [14][0][][] */ -6,-79,120,67,127,-84,-94,18, 
  /* [15][0][][] */ -70,-56,14,127,76,51,-76,38, 
  /* [16][0][][] */ 117,25,-25,15,66,-121,-127,-8, 
  /* [17][0][][] */ 68,127,50,94,48,87,19,-102, 
  /* [18][0][][] */ 34,7,-21,-11,127,2,44,-5, 
  /* [19][0][][] */ 5,127,31,-12,-107,7,30,-33, 
  /* [20][0][][] */ -41,29,64,-127,-16,-9,-40,85, 
  /* [21][0][][] */ -35,73,45,-127,49,33,4,122, 
  /* [22][0][][] */ -78,-42,-78,4,-111,100,127,-18, 
  /* [23][0][][] */ 107,22,-127,23,-5,-36,-63,-38, 
  /* [24][0][][] */ -61,51,-4,5,-16,89,-127,100, 
  /* [25][0][][] */ -118,-77,-127,17,-65,-93,71,124, 
  /* [26][0][][] */ 53,-23,-49,-30,105,-17,127,-41, 
  /* [27][0][][] */ 127,-63,15,77,5,41,-26,108, 
  /* [28][0][][] */ 35,44,26,-36,127,-31,62,-46, 
  /* [29][0][][] */ -8,-10,-73,-45,-104,30,127,-54, 
  /* [30][0][][] */ 32,-127,-52,-73,-75,-16,35,-65, 
  /* [31][0][][] */ -5,43,8,-37,-127,32,-51,1, 
  /* [32][0][][] */ 52,-65,-76,102,3,-96,127,-121, 
  /* [33][0][][] */ 44,127,106,50,78,-17,-26,-34, 
  /* [34][0][][] */ -114,-30,127,5,-33,91,81,18, 
  /* [35][0][][] */ -32,88,127,-3,-118,-91,-46,43, 
  /* [36][0][][] */ -101,-7,127,-46,-19,111,79,45, 
  /* [37][0][][] */ -13,-92,-17,-127,-22,-66,73,35, 
  /* [38][0][][] */ 41,-5,84,-43,68,70,-127,25, 
  /* [39][0][][] */ -24,63,-127,-21,-20,-8,-13,83, 
  /* [40][0][][] */ 58,-50,17,42,15,3,5,127, 
  /* [41][0][][] */ -39,115,114,11,-35,127,-77,56, 
  /* [42][0][][] */ 73,-127,-114,-11,-122,18,-20,-110, 
  /* [43][0][][] */ -6,-54,38,-31,127,-47,31,30, 
  /* [44][0][][] */ 3,127,82,36,-6,3,-55,30, 
  /* [45][0][][] */ -52,35,0,81,-108,66,-127,16, 
  /* [46][0][][] */ -51,-37,71,60,-127,-124,-17,-23, 
  /* [47][0][][] */ -1,78,50,-122,-127,55,-16,99, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0021975177805870771, 0.002872036537155509, 0.0031129177659749985, 0.0021304951515048742, 0.0018428143812343478, 0.0022486846428364515, 0.0015284669352695346, 0.002474495442584157, 0.0034871273674070835, 0.0032061790116131306, 0.0028314550872892141, 0.0027467510662972927, 0.0028129271231591702, 0.0033181868493556976, 0.0023340079933404922, 0.0016916679451242089, 0.0023640026338398457, 0.0021465292666107416, 0.0019562740344554186, 0.0035244815517216921, 0.0027546132914721966, 0.002076256088912487, 0.0023537944070994854, 0.0013792810495942831, 0.0025024751666933298, 0.0021053708624094725, 0.0025274334475398064, 0.0028700593393296003, 0.0018006445607170463, 0.0028354206588119268, 0.0024108986835926771, 0.0018079371657222509, 0.001665431191213429, 0.0018830683548003435, 0.002662931801751256, 0.0016904068179428577, 0.0022058086469769478, 0.0032507998403161764, 0.0022976361215114594, 0.0017674831906333566, 0.0032378837931901217, 0.0013263268629088998, 0.0016466116067022085, 0.0032492517493665218, 0.0017115689115598798, 0.0025713951326906681, 0.0027359069790691137, 0.0019686582963913679, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -1575, 569, 23501, -1425, 4963, -14554, 312, -9950, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.396225217031315e-05, 0.00012824137229472399, 0.00011330056440783665, 0.00010187336738454178, 0.00013200848479755223, 0.00014282221673056483, 7.3633083957247436e-05, 7.7660370152443647e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -21,-49,-35,-54,4,-6,72,83,-88,-76,-53,11,-72,5,-51,27,-70,2,35,127,74,-16,25,65,57,88,23,12,-114,-45,-85,-61,-33,99,26,-65,19,-32,107,-10,39,3,18,-101,56,-12,-18,-78, 
  /* [1][0][][] */ -10,34,-26,-28,-65,65,-30,-29,-45,59,0,26,34,41,-31,7,-27,-97,76,-36,127,15,-48,17,41,3,-65,58,28,-10,64,25,-43,-4,-8,-18,-8,95,-21,-36,60,25,-1,16,97,10,-35,42, 
  /* [2][0][][] */ -15,-30,127,18,94,-35,-21,36,-28,4,-21,46,9,-50,-42,-123,-64,-92,-18,3,-95,35,-39,-51,-70,27,-8,-42,-16,5,-35,-21,-18,8,18,-12,28,-30,-54,-8,54,-31,24,-45,-46,-37,-64,-70, 
  /* [3][0][][] */ 38,7,53,-9,18,-33,44,50,-47,-32,39,2,-76,68,-16,52,53,43,-23,25,-102,-84,127,12,1,-51,-60,-30,-69,62,100,-59,11,-97,-41,28,-37,-48,-7,50,-93,-79,74,7,-121,-69,61,-13, 
  /* [4][0][][] */ 18,-22,62,-37,-14,9,-11,4,-50,-16,-31,13,27,-62,47,-94,31,48,-6,-33,-5,39,17,21,12,4,60,-37,11,20,-127,-11,-5,-24,-1,22,42,-4,38,-10,-43,-30,-65,34,-33,-89,-1,31, 
  /* [5][0][][] */ 10,-41,39,28,19,24,19,-24,-63,-1,-34,26,37,14,15,-45,83,66,4,-11,81,-58,127,-64,-10,19,6,45,2,13,-34,-39,-2,-44,-38,1,42,27,59,-16,-61,50,36,27,41,-18,62,-5, 
  /* [6][0][][] */ -37,65,-119,85,60,18,53,17,-12,-1,48,-71,-81,-24,-32,54,-127,21,-23,94,25,22,-114,-66,18,-42,49,103,-20,-28,-40,-10,50,78,-59,-31,-18,-14,91,13,74,74,-127,-58,-33,117,-47,-26, 
  /* [7][0][][] */ 31,69,-60,3,-9,45,97,93,34,55,-71,-5,-36,-7,-54,-46,20,33,127,76,69,7,90,50,99,80,-44,76,-46,34,-2,-79,22,-56,-10,17,-8,81,-76,87,-53,14,-18,-84,56,-9,52,-23, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0027183955535292625, 0.0054502580314874649, 0.0048152739182114601, 0.0043296180665493011, 0.0056103602983057499, 0.0060699442401528358, 0.0031294059008359909, 0.0033005657605826855, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -273, 14943, -1715, 3048, 2061, -1546, 2408, -2392, -2708, -700, -369, -80, -1929, -1129, -3850, 998, 7791, 3317, -463, -543, -8397, -1539, 8309, -6741, -1611, -428, 780, -5162, 550, -517, -6053, 15566, 2314, 1349, 29, 1290, -159, -356, 13729, -1809, 7153, -5172, 7092, 4381, -3667, 15680, 832, -3627, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00022419194283429533, 0.00011582748265936971, 0.00051499402616173029, 0.00020125247829128057, 0.00026662228628993034, 0.0002737172762863338, 0.00021250793361105025, 0.00028377730632200837, 0.00013208959717303514, 0.00028747043688781559, 0.00030121789313852787, 0.0012700017541646957, 0.00039792864117771387, 0.00042556060361675918, 0.00027964278706349432, 0.0008261927287094295, 0.00015941842866595834, 6.8989938881713897e-05, 0.00018881757569033653, 0.00036639816244132817, 0.0001916565524879843, 0.00031247083097696304, 0.00014359959459397942, 0.00039901069249026477, 0.00018458373961038888, 0.00034556078026071191, 0.00040684500709176064, 0.00022272358182817698, 0.00018185158842243254, 0.00039180772728286684, 0.00017619814025238156, 0.0001001390628516674, 0.00014400707732420415, 0.00030385947320610285, 0.00017662676691543311, 0.00032652894151397049, 0.0026367688551545143, 0.00043720085523091257, 0.00014630300574935973, 0.00015439155686181039, 0.00021640115301124752, 0.00012384106230456382, 0.00028582391678355634, 0.00024631412816233933, 0.00024776774807833135, 5.1952505600638688e-05, 5.5308853916358203e-05, 0.00015606998931616545, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 15,-50,15,-8,-29,-77,-49,68,-69,-13,-35,14,47,10,-1,13,127,13,77,-11,23,3,-53,31,3,-17,-10,5,-55,97,-47,-108,92,-19,-32,-48,2,-19,-13,22,-39,53,-4,37,-5,34,127,15, -127,-60,-18,127,-75,62,-113,127,6,23,-15,-2,51,34,8,-33,-42,66,15,-3,25,127,16,127,127,-39,-53,44,69,-127,-19,-109,100,-23,-17,-127,37,12,-20,-33,-127,8,-99,-88,59,55,22,127, 0,11,16,-9,-29,58,39,60,-6,-21,-13,3,-12,11,5,11,-74,41,-87,-50,13,1,127,24,-23,-6,11,1,14,47,16,-62,1,-37,-10,51,18,-16,27,43,14,-12,9,-52,7,60,-54,-7, 
  /* [0][1][][] */ -24,-49,-19,-12,19,-79,127,-68,-24,30,9,38,127,22,14,-19,-17,-48,54,47,90,-53,33,22,-51,127,-79,-9,127,-103,42,-127,-27,-2,-53,2,27,-52,-70,35,119,127,-2,-127,-53,-76,23,104, 100,-127,127,-16,127,53,-77,-71,40,127,127,-127,-84,127,127,127,113,127,120,127,127,94,0,2,86,-108,-124,91,31,121,127,2,-127,127,127,121,-127,127,-127,-127,53,41,-127,-28,127,-127,-35,82, 27,3,-34,-21,-59,127,-117,93,85,-62,13,71,-29,17,13,-52,1,15,-127,-7,33,-89,-27,-2,77,-14,3,127,-89,-51,40,-85,-27,15,100,-44,54,-24,-12,-99,101,16,19,13,-52,109,107,-66, 
  /* [0][2][][] */ -21,1,11,-54,-7,-66,-16,10,-25,13,-23,-1,-7,-10,10,2,-55,4,33,-55,7,-20,67,-3,-100,3,65,-41,6,13,-28,35,6,-26,-42,10,16,3,-8,80,-44,24,-4,15,-9,30,-2,31, 32,-58,-29,-63,30,22,119,-101,127,-26,-27,-3,-63,-24,-14,-61,-24,111,-4,11,-23,19,-27,-33,-81,61,127,-35,-103,3,-70,-29,10,-19,-2,6,74,-29,-13,110,-118,20,-25,63,52,88,31,-101, -1,-3,7,-44,-25,-20,-8,-56,-50,-18,-27,-1,23,-13,-10,14,44,34,-12,-43,6,-23,-46,-9,17,-19,59,-15,-42,8,-39,-14,55,-29,16,-66,4,0,10,33,-24,-1,0,4,-21,50,111,-30, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0095281573012471199, 0.0049226679839193821, 0.021887246519327164, 0.0085532302036881447, 0.011331446468830109, 0.011632984504103661, 0.0090315872803330421, 0.01206053514033556, 0.0056138080544769764, 0.01221749372780323, 0.0128017608076334, 0.053975075483322144, 0.016911966726183891, 0.018086325377225876, 0.011884817853569984, 0.035113189369440079, 0.0067752832546830177, 0.0029320723842829466, 0.0080247465521097183, 0.01557192113250494, 0.008145403116941452, 0.013280009850859642, 0.0061029829084873199, 0.016957953572273254, 0.0078448085114359856, 0.014686333015561104, 0.017290912568569183, 0.0094657521694898605, 0.0077286926098167896, 0.016651827841997147, 0.0074884206987917423, 0.004255909938365221, 0.0061203003861010075, 0.012914027087390423, 0.0075066373683512211, 0.013877479359507561, 0.11206267774105072, 0.018581036478281021, 0.0062178773805499077, 0.0065616411156952381, 0.0091970488429069519, 0.0052632451988756657, 0.012147516012191772, 0.010468350723385811, 0.010530129075050354, 0.0022079814225435257, 0.0023506262805312872, 0.0066329743713140488, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3196, 7080, 9773, 2917, 2993, -2188, 3753, 8050, 2462, -1111, 4511, -2796, 8685, -2635, 2242, 18514, -318, 1671, 255, 3836, 3145, 4507, 801, 53039, 6242, 2961, 20702, 1777, 4574, 6616, 621, 1737, 282, 2405, 42, -196, -2606, -1796, 3986, 1861, 5868, 1245, 7697, 4212, 2451, 2348, 2104, 4720, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00019563348905649036, 0.0001188794631161727, 9.2611415311694145e-05, 0.00014415611803997308, 0.0001997290673898533, 0.00016338827845174819, 0.00019705241720657796, 0.0001033318621921353, 0.00018234908930025995, 0.00019257540407124907, 0.00017771779675967991, 0.00020768937247339636, 9.570517431711778e-05, 0.00020269452943466604, 0.00022162740060593933, 5.9309848438715562e-05, 0.00030916876858100295, 0.00024702382506802678, 0.00028222461696714163, 0.00019042532949242741, 0.00020342294010333717, 0.00018588494276627898, 0.00032558909151703119, 2.3071563191479072e-05, 0.00013770730583928525, 0.00018046797777060419, 5.1250644901301712e-05, 0.00024988208315335214, 0.00016588285507168621, 0.00013549384311772883, 0.00046930837561376393, 0.00029724693740718067, 0.00027012248756363988, 0.00022549516870640218, 0.00023542757844552398, 0.00032247044146060944, 0.00023318250896409154, 0.00015130915562622249, 0.00015762464317958802, 0.00019651603361126035, 0.00015067352796904743, 0.00023761948978062719, 0.00012327246076893061, 0.0001573416666360572, 0.0002384793187957257, 0.00026145769516006112, 0.00030514306854456663, 0.00015360229008365422, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 41,127,-45,-63,29,96,23,88, 
  /* [1][0][][] */ 87,-63,48,-120,-74,85,-127,-72, 
  /* [2][0][][] */ -34,116,127,50,111,14,51,-5, 
  /* [3][0][][] */ 108,61,-106,53,-24,-85,-127,-46, 
  /* [4][0][][] */ -38,32,13,-81,0,127,97,50, 
  /* [5][0][][] */ -8,62,-127,-111,57,102,60,-24, 
  /* [6][0][][] */ 27,127,32,30,93,4,8,-62, 
  /* [7][0][][] */ 127,-34,5,53,34,14,98,38, 
  /* [8][0][][] */ 60,86,56,81,113,53,127,-79, 
  /* [9][0][][] */ 9,127,-109,-86,27,96,22,81, 
  /* [10][0][][] */ -69,-49,34,-63,10,-19,-34,127, 
  /* [11][0][][] */ 13,-127,-124,-62,25,-18,56,-3, 
  /* [12][0][][] */ 4,-84,-127,-24,-86,25,-60,-7, 
  /* [13][0][][] */ 3,6,-115,121,-127,-16,15,-29, 
  /* [14][0][][] */ -74,-54,-127,-8,51,-40,-5,-66, 
  /* [15][0][][] */ 28,-88,-127,22,-93,-29,-31,-26, 
  /* [16][0][][] */ 127,-42,-19,61,-67,12,20,87, 
  /* [17][0][][] */ -34,93,127,-48,-48,-2,-14,-33, 
  /* [18][0][][] */ -7,-127,42,60,-21,-57,37,-69, 
  /* [19][0][][] */ 127,-34,-43,56,-84,11,37,101, 
  /* [20][0][][] */ -31,-127,68,55,-13,-78,8,-60, 
  /* [21][0][][] */ 16,-40,-2,-6,127,20,33,16, 
  /* [22][0][][] */ -127,38,-85,51,55,41,-89,-99, 
  /* [23][0][][] */ -93,-70,59,9,-103,127,124,-62, 
  /* [24][0][][] */ -5,43,6,-41,-10,127,127,3, 
  /* [25][0][][] */ -64,-93,-127,-83,-66,-11,-32,-51, 
  /* [26][0][][] */ 14,71,14,120,-83,19,-127,-13, 
  /* [27][0][][] */ 13,-127,36,56,-9,-53,-2,-102, 
  /* [28][0][][] */ 7,110,40,42,127,-8,1,-64, 
  /* [29][0][][] */ 49,53,0,-11,58,-127,-85,33, 
  /* [30][0][][] */ 16,0,28,-127,18,-21,7,-23, 
  /* [31][0][][] */ 49,-51,-10,70,-28,26,10,127, 
  /* [32][0][][] */ -68,-70,1,-47,-99,127,41,37, 
  /* [33][0][][] */ 5,51,32,-20,5,95,-127,59, 
  /* [34][0][][] */ 54,127,-104,-41,-17,16,-73,40, 
  /* [35][0][][] */ -1,-127,25,11,-39,-50,18,-72, 
  /* [36][0][][] */ -14,-17,-69,-2,-127,-31,-11,-13, 
  /* [37][0][][] */ -85,-124,113,103,-59,-127,-24,-36, 
  /* [38][0][][] */ -98,22,64,-54,-127,-87,-54,98, 
  /* [39][0][][] */ 59,-127,106,66,-8,-96,-49,-51, 
  /* [40][0][][] */ -6,45,14,48,-127,-15,-40,4, 
  /* [41][0][][] */ 95,127,-83,-113,50,21,2,28, 
  /* [42][0][][] */ 2,-43,-16,20,127,25,67,-1, 
  /* [43][0][][] */ 127,37,116,37,-69,-13,74,122, 
  /* [44][0][][] */ 25,45,-23,-8,76,-83,-127,47, 
  /* [45][0][][] */ 48,-8,31,12,78,-127,3,-47, 
  /* [46][0][][] */ 58,-51,-15,127,25,65,31,83, 
  /* [47][0][][] */ -101,-76,52,50,-33,19,127,-61, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028736994136124849, 0.0017462441464886069, 0.0013603875413537025, 0.0021175378933548927, 0.002933860057964921, 0.0024000429548323154, 0.0028945421800017357, 0.0015178623143583536, 0.0026785621885210276, 0.0028287784662097692, 0.0026105321012437344, 0.0030507906340062618, 0.0014058323577046394, 0.0029774203430861235, 0.0032555290963500738, 0.00087121420074254274, 0.004541441798210144, 0.0036285822279751301, 0.0041456539183855057, 0.0027971956878900528, 0.002988120075315237, 0.0027305011171847582, 0.0047826431691646576, 0.00033890278427861631, 0.0020228100474923849, 0.00265093008056283, 0.00075283093610778451, 0.0036705678794533014, 0.0024366863071918488, 0.0019902961794286966, 0.0068937642499804497, 0.0043663196265697479, 0.0039678830653429031, 0.0033123434986919165, 0.0034582426305860281, 0.0047368328087031841, 0.003425264498218894, 0.002222610404714942, 0.0023153799120336771, 0.0028866631910204887, 0.0022132734302431345, 0.0034904400818049908, 0.001810773741453886, 0.0023112231865525246, 0.0035030702129006386, 0.0038406040985137224, 0.0044823074713349342, 0.0022562947124242783, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8492, 15581, -3717, 6092, -2069, 4638, -13295, -18269, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023431854788213968, 0.00010411410039523616, 0.00015119226009119302, 0.00011016590724466369, 0.00017099555407185107, 0.00013201966066844761, 0.0001722744491416961, 0.00012261592200957239, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-11,41,16,-41,0,4,0,-45,0,-64,-65,-26,-54,-18,-34,42,-47,44,35,-17,43,-33,11,8,-44,61,-28,8,-18,7,2,84,44,39,-127,20,-8,-19,-30,6,-23,45,49,37,13,29,2, 
  /* [1][0][][] */ 9,21,52,-22,-19,66,-40,-32,9,26,-5,-99,5,117,-21,56,-11,19,-32,-66,15,-81,-29,12,-71,-5,-13,-119,-19,-10,17,-63,43,78,-55,-7,127,-43,-5,54,-30,52,-74,-43,122,-13,-40,-42, 
  /* [2][0][][] */ -8,-29,-83,16,-2,54,24,7,-3,57,2,35,72,-99,24,-84,37,-90,12,19,-16,67,-3,28,-23,55,-28,-69,29,8,21,-81,-59,-93,42,-45,112,21,-23,-51,-1,36,115,14,127,22,13,16, 
  /* [3][0][][] */ -1,26,-65,51,13,-46,-88,-106,24,-18,-50,2,13,16,31,76,-13,21,-20,33,-13,-85,24,-59,-59,1,127,-9,-53,-9,-77,23,-11,-79,3,0,-26,-32,-20,108,-48,-34,6,24,39,1,-41,54, 
  /* [4][0][][] */ -31,-35,-8,15,20,-25,-7,-6,22,-23,55,-72,3,26,5,7,-10,-16,16,-16,-5,-45,10,-18,21,0,34,44,35,24,-15,25,-12,0,-4,-7,-67,87,40,-19,26,-17,-23,-17,-72,12,127,9, 
  /* [5][0][][] */ 49,-7,7,17,15,-45,38,-127,31,-37,-28,121,-87,75,23,-72,5,-84,16,17,-65,72,-27,-60,-58,97,-34,5,-29,55,-51,-32,35,77,24,-8,-52,-14,-57,-39,19,-53,-54,-8,-37,56,100,22, 
  /* [6][0][][] */ 53,-26,11,-9,-35,-21,-36,15,-44,9,-26,127,-41,-39,5,57,19,43,22,31,46,-82,-28,19,16,38,-60,-1,19,-35,13,44,-5,6,-10,-1,15,11,15,-12,-14,-36,42,75,3,-24,78,-16, 
  /* [7][0][][] */ -28,-2,-22,85,37,36,4,23,33,1,72,6,126,105,62,60,33,43,-7,-18,30,-30,-94,-26,2,-12,-25,69,41,-34,-21,-31,31,-6,50,-94,-68,37,33,47,-31,32,92,127,-63,-21,-110,79, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0099585382267832756, 0.004424849059432745, 0.0064256708137691021, 0.0046820510178804398, 0.0072673107497394085, 0.0056108352728188038, 0.0073216641321778297, 0.0052111768163740635, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11083, 2722, 5465, -354, 1068, -952, -1127, 35566, -264, 6409, 7674, 71829, 1484, 2287, 2536, 9553, -2467, 11870, -2329, 7246, 16111, -910, 2138, -12755, 11602, 1234, -67, 11629, 1625, 2270, -10593, 14683, 3660, 3719, 1776, 5931, -9088, 6700, 3901, 13249, -4610, -335, 6202, -974, -4076, -5063, -456, -606, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.094821143662557e-05, 0.00010605488932924345, 0.000160115712787956, 0.00025603899848647416, 0.00078871380537748337, 0.00021730696607846767, 8.3864550106227398e-05, 7.8608005424030125e-05, 0.00015685359539929777, 8.4338309534359723e-05, 5.7096538512269035e-05, 4.047967740916647e-05, 8.3399667346384376e-05, 8.067810267675668e-05, 0.0001886790560092777, 0.00023304055503103882, 9.2833215603604913e-05, 0.00032119965180754662, 0.00010993364412570372, 0.00013106242113281041, 0.00010622895933920518, 0.00023345123918261379, 0.00014377583283931017, 0.00019445719954092056, 9.624144877307117e-05, 0.00011688647646224126, 5.5112053814809769e-05, 0.00011612602247623727, 0.00019078812329098582, 0.00086480181198567152, 0.00020851324370596558, 6.1033591919112951e-05, 8.3111677668057382e-05, 0.00013667911116499454, 0.00017317404854111373, 6.7703003878705204e-05, 9.7165233455598354e-05, 5.7240122259827331e-05, 0.00014772081340197474, 7.8679877333343029e-05, 9.4474140496458858e-05, 0.00013611096073873341, 6.4009233028627932e-05, 7.8439676144625992e-05, 0.00010295047104591504, 0.00020935884094797075, 7.9845158325042576e-05, 0.00028187199495732784, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -11,-56,-29,-34,127,-64,37,-44,-60,-72,-13,-27,105,32,5,-127,51,-11,12,-59,-81,109,30,10,-6,57,37,-22,77,-82,30,-107,-103,-98,16,66,18,127,64,-66,-116,-48,42,99,43,-106,127,62, 23,-122,-78,28,-83,103,56,-45,-60,11,94,-127,78,62,63,-86,-66,-97,43,-54,-65,56,-30,127,-68,100,70,-127,97,-57,-12,-88,-25,-69,59,127,103,101,86,-54,-120,-93,49,110,63,127,106,45, 2,-58,-77,66,-33,-32,18,-27,74,10,110,-109,28,53,-59,-17,-81,-27,38,-43,-59,-52,-58,-19,-54,53,39,-70,22,61,115,-121,33,-11,-1,55,37,52,8,18,-2,116,107,57,52,46,23,-100, 
  /* [0][1][][] */ -105,-63,-29,-54,-90,-71,114,-92,-127,-127,104,-72,120,50,-127,-53,127,-127,-63,-101,-108,78,-61,40,5,101,96,-58,-106,-110,26,-112,-127,-127,-127,58,37,84,2,-58,89,-11,88,102,92,114,123,-127, -78,-127,-127,-73,-41,127,125,-127,63,39,127,-112,127,127,33,-62,56,-85,-127,-127,-127,114,-127,107,-127,127,97,-96,-127,127,-48,-104,-100,-84,24,107,127,95,-26,-127,127,-127,127,127,127,12,109,122, -108,-29,-110,127,84,-53,22,-31,60,12,15,-79,15,62,49,-32,-9,8,-12,-70,-85,69,-99,-34,-107,51,22,-60,-62,34,127,-127,-66,-13,51,56,44,60,-21,-18,64,111,73,37,40,-31,1,21, 
  /* [0][2][][] */ -127,-12,24,11,-67,-26,-6,-37,10,-61,4,-60,31,30,-65,-22,-59,2,87,-21,-67,127,-30,23,11,40,118,-20,18,53,26,12,-29,-60,-39,11,35,50,-94,-19,-18,-22,59,85,30,71,11,-53, -82,4,-15,-43,70,44,127,-71,80,5,-80,-118,22,9,-115,-18,43,18,45,-16,-26,73,-39,108,-59,82,127,-19,32,1,-34,-10,-58,-19,-66,29,28,47,-127,-23,22,-37,76,105,65,-92,12,2, -4,0,-15,10,-15,-9,48,-31,-57,-7,-18,-40,-12,-4,30,7,37,39,10,17,-59,-5,-3,-34,-73,-17,70,-6,0,-82,69,-38,-121,-4,20,24,16,36,-67,-14,-15,104,19,72,15,9,11,45, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038652990479022264, 0.0045073325745761395, 0.0068049179390072823, 0.010881657712161541, 0.03352033719420433, 0.0092355459928512573, 0.0035642432048916817, 0.0033408401068300009, 0.0066662775352597237, 0.0035843781661242247, 0.002426602877676487, 0.0017203863244503736, 0.0035444858949631453, 0.0034288193564862013, 0.0080188596621155739, 0.0099042234942317009, 0.0039454116486012936, 0.013650985434651375, 0.0046721799299120903, 0.0055701527744531631, 0.0045147305354475975, 0.0099216774106025696, 0.0061104726046323776, 0.0082644307985901833, 0.0040902616456151009, 0.0049676750786602497, 0.0023422623053193092, 0.0049353558570146561, 0.0081084948033094406, 0.036754075437784195, 0.0088618127629160881, 0.002593927551060915, 0.003532246220856905, 0.0058088619261980057, 0.0073598967865109444, 0.0028773776721209288, 0.004129522480070591, 0.0024327051360160112, 0.0062781344167888165, 0.0033438948448747396, 0.0040151509456336498, 0.0057847155258059502, 0.0027203923091292381, 0.0033336861524730921, 0.0043753948993980885, 0.0088977506384253502, 0.003393419086933136, 0.011979559436440468, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1913, -964, -389, 1287, 23962, 2677, -400, 6160, 1530, 1560, 320, 3792, 1086, 991, -760, 595, 2974, 11816, 2906, -682, 2458, -803, -197, 3619, -500, -869, 3033, -257, 4722, 17345, 2860, -27, 395, 172, 1901, -220, 763, -378, 1683, 1446, 1534, 1730, -97, -310, 1037, 2881, 1159, -196, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030087993945926428, 0.0002418054937152192, 0.00027215114096179605, 0.00027280524955131114, 4.2732848669402301e-05, 0.00026348186656832695, 0.00052364252042025328, 0.00015331803297158331, 0.00026552658528089523, 0.00047108612488955259, 0.00029435151373036206, 0.00022193687618710101, 0.00023995914671104401, 0.00025640684179961681, 0.00026792654534801841, 0.00029985254514031112, 0.00022652090410701931, 8.033362973947078e-05, 0.00027332402532920241, 0.00030877089011482894, 0.00022893778805155307, 0.00019258986867498606, 0.00038665003376081586, 0.00023546049487777054, 0.00037332330248318613, 0.00073448108742013574, 0.00020968263561371714, 0.00054535421077162027, 0.0001773744443198666, 5.6548615248175338e-05, 0.00027609893004409969, 0.00061093049589544535, 0.0003618780174292624, 0.00034779179259203374, 0.00033237485331483185, 0.00027857592795044184, 0.00028757459949702024, 0.00048576030530966818, 0.00031807113555260003, 0.00042897820821963251, 0.00031801234581507742, 0.00033005536533892155, 0.00032549418392591178, 0.00039495527744293213, 0.0003419926215428859, 0.00021734228357672691, 0.00026975365472026169, 0.00029478257056325674, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -46,43,-18,-41,-114,-48,-127,34, 
  /* [1][0][][] */ 112,-127,-50,-67,124,-122,122,7, 
  /* [2][0][][] */ -103,108,-45,-127,33,-23,-7,44, 
  /* [3][0][][] */ 46,1,127,-29,102,110,127,0, 
  /* [4][0][][] */ -59,-109,98,21,-28,-127,-25,-29, 
  /* [5][0][][] */ 127,-38,57,32,-103,-2,20,6, 
  /* [6][0][][] */ 31,23,127,-23,33,-35,-36,18, 
  /* [7][0][][] */ 27,20,-127,-23,-36,110,116,-68, 
  /* [8][0][][] */ -17,127,-56,4,87,100,33,49, 
  /* [9][0][][] */ -10,126,-55,62,-11,-117,65,127, 
  /* [10][0][][] */ 1,-110,-9,-44,-58,-127,-73,-77, 
  /* [11][0][][] */ -120,-89,127,72,-28,-88,126,56, 
  /* [12][0][][] */ -29,36,-127,48,33,-57,-52,71, 
  /* [13][0][][] */ 112,-127,120,104,34,43,42,-60, 
  /* [14][0][][] */ -35,112,6,-127,-29,-114,-57,-97, 
  /* [15][0][][] */ 47,104,35,-19,30,-64,98,-127, 
  /* [16][0][][] */ -127,-125,-73,105,-55,13,-38,80, 
  /* [17][0][][] */ -22,-127,-123,91,-85,46,-28,53, 
  /* [18][0][][] */ -76,-52,-30,37,-6,40,-15,127, 
  /* [19][0][][] */ 75,-116,117,-127,21,-75,35,-44, 
  /* [20][0][][] */ 27,99,68,8,58,127,93,-30, 
  /* [21][0][][] */ 21,122,46,-33,38,-85,97,-127, 
  /* [22][0][][] */ 20,-1,87,21,-19,127,26,-30, 
  /* [23][0][][] */ -68,-54,-2,-92,73,57,-32,-127, 
  /* [24][0][][] */ -91,-65,36,-91,110,76,-43,-127, 
  /* [25][0][][] */ 127,8,-63,-25,20,31,-57,1, 
  /* [26][0][][] */ -127,-15,-126,-10,-43,-27,24,13, 
  /* [27][0][][] */ 57,23,-13,-45,-127,-15,64,92, 
  /* [28][0][][] */ -127,-103,0,81,-71,-111,-9,21, 
  /* [29][0][][] */ 91,93,34,-127,32,11,-49,-104, 
  /* [30][0][][] */ -56,-57,18,-67,55,65,-44,-127, 
  /* [31][0][][] */ 65,59,-5,127,8,-83,2,15, 
  /* [32][0][][] */ -28,127,-10,50,17,61,-18,62, 
  /* [33][0][][] */ -36,127,-85,10,37,-25,-10,-4, 
  /* [34][0][][] */ -127,-76,-77,64,4,-20,18,94, 
  /* [35][0][][] */ -48,119,-23,2,75,127,39,73, 
  /* [36][0][][] */ 58,22,3,-59,-127,-47,103,96, 
  /* [37][0][][] */ -55,101,44,20,-127,113,-33,-99, 
  /* [38][0][][] */ 52,27,37,6,111,51,127,16, 
  /* [39][0][][] */ -27,-69,52,-34,12,12,-118,127, 
  /* [40][0][][] */ -103,-49,-64,127,-52,13,-7,68, 
  /* [41][0][][] */ 127,6,51,64,-46,-14,12,-46, 
  /* [42][0][][] */ -38,7,-71,-127,51,-102,-7,74, 
  /* [43][0][][] */ 19,0,78,-13,43,127,94,2, 
  /* [44][0][][] */ -20,-28,-66,127,40,-10,-38,-53, 
  /* [45][0][][] */ 82,94,127,-79,44,-32,14,-101, 
  /* [46][0][][] */ -18,-117,-32,39,-19,40,-52,127, 
  /* [47][0][][] */ 36,51,91,-4,99,116,127,-57, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0035247805062681437, 0.0028327289037406445, 0.0031882254406809807, 0.0031958881299942732, 0.0005006113788112998, 0.0030866656452417374, 0.0061344234272837639, 0.0017961065750569105, 0.0031106194946914911, 0.0055187302641570568, 0.0034483007621020079, 0.0025999699719250202, 0.0028110991697758436, 0.0030037823598831892, 0.0031387347262352705, 0.0035127447918057442, 0.0026536714285612106, 0.00094110099598765373, 0.0032019654754549265, 0.0036172224208712578, 0.0026819850318133831, 0.00225617247633636, 0.0045295692980289459, 0.0027583979535847902, 0.0043734479695558548, 0.0086043775081634521, 0.0024564126506447792, 0.0063887741416692734, 0.0020779252517968416, 0.00066246179630979896, 0.0032344732899218798, 0.0071569941937923431, 0.0042393673211336136, 0.0040743486024439335, 0.0038937404751777649, 0.0032634912058711052, 0.0033689099363982677, 0.005690637044608593, 0.0037261738907545805, 0.0050254398956894875, 0.0037254851777106524, 0.00386656797491014, 0.0038131340406835079, 0.004626864567399025, 0.0040064118802547455, 0.0025461446493864059, 0.0031601390801370144, 0.003453350393101573, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -6170, -2097, 11878, -10150, 22476, 8933, -8563, 9831, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00015440750576090068, 0.00022277074458543211, 0.00020016195776406676, 0.00026188575429841876, 0.0001836524170357734, 0.00018692592857405543, 0.00013890533591620624, 0.00025623486726544797, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -27,-7,-8,-70,-23,-44,22,-30,37,-5,-31,-3,110,127,-6,-90, 
  /* [1][0][][] */ 127,-56,-33,22,-43,78,-72,-47,-47,88,-29,-54,-19,2,-44,-14, 
  /* [2][0][][] */ -42,-95,39,45,39,-58,-83,-22,29,-92,19,-127,40,-21,-68,10, 
  /* [3][0][][] */ 35,9,4,19,-14,61,-44,-13,127,42,4,26,10,-16,8,12, 
  /* [4][0][][] */ -98,-44,-38,-127,-5,28,73,-104,30,-16,-71,-36,-119,25,-56,-28, 
  /* [5][0][][] */ 85,47,56,-39,40,-57,-120,-127,-18,-85,57,53,-60,53,53,-47, 
  /* [6][0][][] */ 127,44,-126,-77,29,-69,-10,-97,-47,22,-122,91,92,-101,20,92, 
  /* [7][0][][] */ -127,7,110,-30,-55,0,-14,-57,-46,55,93,-24,65,-21,36,36, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0065623186528682709, 0.009467756375670433, 0.0085068829357624054, 0.011130144819617271, 0.0078052273020148277, 0.0079443519935011864, 0.0059034763835370541, 0.010889981873333454, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 20874, 442, 468, 3462, -2228, 732, 9241, 1187, -579, 401, -2304, 1067, 5540, -308, 57, -655, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010944038513116539, 0.00034778122790157795, 0.00015565817011520267, 0.00016566984413657337, 0.00094044208526611328, 0.00087157182861119509, 0.00017606983601581305, 0.00081701262388378382, 0.00036068816552869976, 0.0012139489408582449, 0.00026165819144807756, 0.00022908342361915857, 9.9001168564427644e-05, 0.00036904163425788283, 0.00020187260815873742, 0.00081912567839026451, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 5,-20,12,5,-13,11,7,16,-13,-12,-4,-9,-9,-9,-6,-6, 9,-14,11,4,14,-3,13,-26,-6,9,-3,82,-16,19,-4,-5, 1,-8,0,4,7,-14,-7,11,2,1,-5,-13,-3,-4,-6,-4, 
  /* [0][1][][] */ 8,-20,-3,9,127,-25,-127,-20,127,127,2,-11,89,-27,-9,-24, -127,127,127,4,-90,-93,-10,-101,18,-106,127,127,127,127,127,127, 23,-11,-15,4,-7,127,16,-10,-4,-13,-7,-19,5,-4,-23,-11, 
  /* [0][2][][] */ -7,-23,11,-21,-12,14,40,8,-14,-8,-5,-3,-17,-3,-13,-16, 17,-21,3,-127,10,-18,-10,127,-5,1,3,-13,-5,-62,-25,-40, -2,-12,-3,-7,6,-6,5,-2,-4,1,-7,-2,-2,-7,-22,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0046512163244187832, 0.014780702069401741, 0.0066154720261693001, 0.0070409681648015976, 0.039968788623809814, 0.037041801959276199, 0.0074829678051173687, 0.034723035991191864, 0.015329247340559959, 0.051592830568552017, 0.01112047303467989, 0.0097360452637076378, 0.0042075496166944504, 0.015684269368648529, 0.0085795857012271881, 0.034812841564416885, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -927, 4563, 1043, 6119, 95708, 56607, 2574, 8739, 4804, 6494, 1546, 3452, 6393, -13064, -51, 43081, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00020063323609065264, 0.00042363794636912644, 0.00023253248946275562, 0.00014271629333961755, 1.5020101272966713e-05, 2.8729178666253574e-05, 0.00013939940254203975, 2.4993889383040369e-05, 0.00015771202743053436, 3.2820797059684992e-05, 0.00044350046664476395, 0.00037031812826171517, 0.00036422754055820405, 1.6642597984173335e-05, 0.0006144100334495306, 3.266441126470454e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -81, -105, -28, 
  /* [0][1][][] */ 68, -33, 18, 
  /* [0][2][][] */ 34, 127, 20, 
  /* [1][0][][] */ 100, -94, -14, 
  /* [1][1][][] */ -127, 98, 19, 
  /* [1][2][][] */ 9, -5, -18, 
  /* [2][0][][] */ -25, -3, -49, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -96, -80, 
  /* [3][0][][] */ 113, 119, 54, 
  /* [3][1][][] */ -3, -24, -16, 
  /* [3][2][][] */ -103, -127, -45, 
  /* [4][0][][] */ 26, -66, -18, 
  /* [4][1][][] */ 32, -127, -2, 
  /* [4][2][][] */ 20, -65, -6, 
  /* [5][0][][] */ -71, 22, 4, 
  /* [5][1][][] */ -127, 25, 9, 
  /* [5][2][][] */ -69, 17, 7, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -48, 56, -14, 
  /* [6][2][][] */ -33, -49, -85, 
  /* [7][0][][] */ 26, 14, -23, 
  /* [7][1][][] */ 127, 65, -10, 
  /* [7][2][][] */ 39, 15, -11, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -25, -60, 97, 
  /* [9][0][][] */ -25, 55, -3, 
  /* [9][1][][] */ -17, 127, -9, 
  /* [9][2][][] */ -3, 83, -11, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 39, 17, 
  /* [11][0][][] */ 5, -22, 7, 
  /* [11][1][][] */ 63, -98, 33, 
  /* [11][2][][] */ -90, 127, -51, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 112, 5, 
  /* [12][2][][] */ -79, 77, 4, 
  /* [13][0][][] */ 44, -11, -5, 
  /* [13][1][][] */ 96, 66, 18, 
  /* [13][2][][] */ 114, 127, 86, 
  /* [14][0][][] */ -30, -27, 47, 
  /* [14][1][][] */ 43, 97, -127, 
  /* [14][2][][] */ -15, -69, 80, 
  /* [15][0][][] */ -80, -21, 46, 
  /* [15][1][][] */ -127, -121, 48, 
  /* [15][2][][] */ -42, -105, -22, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.051161471754312515, 0.10802766680717468, 0.059295780956745148, 0.036392651498317719, 0.00383012555539608, 0.0073259402997791767, 0.035546846687793732, 0.0063734413124620914, 0.040216565132141113, 0.0083693023771047592, 0.11309260874986649, 0.094431117177009583, 0.092878013849258423, 0.0042438623495399952, 0.15667454898357391, 0.008329424075782299, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.08536132425069809, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.068077228963375092, } };
const TfArray<1, int> quant50_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.049959421157836914, } };
const TfArray<1, int> quant53_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.078220956027507782, } };
const TfArray<1, int> quant54_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.042774446308612823, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.020301578566431999, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022379402071237564, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.043051254004240036, } };
const TfArray<1, int> quant61_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.062819354236125946, } };
const TfArray<1, int> quant62_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019956411793828011, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.054390162229537964, } };
const TfArray<1, int> quant65_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.089273147284984589, } };
const TfArray<1, int> quant66_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.045336011797189713, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.065793462097644806, } };
const TfArray<1, int> quant69_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
